#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Assessment
 * Module:  Survey
 * Descrption:
 * CreateDate: 2010/11/18 14:01:00
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;
using log4net;

using EAFrame.Core;
using EAFrame.Core.Caching;
using EAFrame.Core.Service;
using EAFrame.Core.Enums;
using EAFrame.Core.Extensions;
using EAFrame.Core.DataFilter;
using SunTek.Assessment.Domain;
using EAFrame.Core.Data;
using System.Data;
using System.Linq;

namespace SunTek.Assessment.Service
{
    public class SurveyService :  BaseService<string,Survey>
    {
		#region Fields
		private readonly ILog log = LogManager.GetLogger(typeof(SurveyService));
		#endregion
		
		#region Constructors
		
		public SurveyService(){ }
		#endregion

        #region ISurveyService Imp
        public void SaveSurvey(Survey survey, IList<SurveyResult> surveyResults)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Survey)))
            {
                //删除已经存在的
                repository.ExecuteSql<Survey>(string.Format("delete from LA_SurveyResult where SurveyID='{0}'", survey.ID));
                repository.SaveOrUpdate(survey);
                SurveyResultService surveyResultService = new SurveyResultService();
                foreach (var p in surveyResults)
                {
                    surveyResultService.SaveOrUpdate(p);
                }
                trans.Commit();
            }
            ClearCache(typeof(Survey));
            ClearCache(typeof(SurveyResult));
        }

        public IList<Survey> GetSurveyByUser(string userId)
        {
            return repository.ExecuteDataTable<Survey>(string.Format("select t1.* from LA_Survey t1 join LA_SurveyResult t2 on t1.ID=t2.SurveyID where t2.Tester='{0}'", userId), null).ToList <Survey>();
        }

        /// <summary>
        /// 发布测评活动：1.更新测评活动记录状态；2.更新参评人的状态
        /// </summary>
        /// <param name="surveyID"></param>
        public void Publish(string surveyID)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Survey)))
            {
                repository.ExecuteSql<SurveyResult>(string.Format("delete from LA_SurveyResult where SurveyID in (select ID from LA_Survey where ParentID='{0}')", surveyID));
                repository.ExecuteSql<Survey>(string.Format("delete from LA_Survey where ParentID='{0}'", surveyID));
                repository.ExecuteSql<Survey>(string.Format("update LA_Survey set Status=1  where ID='{0}'", surveyID));
                repository.ExecuteSql<SurveyResult>(string.Format("update LA_SurveyResult set Status=1  where SurveyID='{0}'", surveyID));
                SurveyService surveyService = new SurveyService();
                
                Survey survey = surveyService.GetDomain(surveyID);
                string testerStr = survey.SurveyTarget;
                


                //根据测评对象，批量生成子测评活动。
                IList<string> surveyTargets = testerStr.Trim(',').Split(',').ToList();

                foreach (string surveyTarget in surveyTargets)
                {
                    Survey surveyChild = new Survey()
                    {
                        ID = IdGenerator.NewComb().ToString(),
                        SurveyTarget = surveyTarget,
                        ParentID = survey.ID,
                        CreateTime = DateTime.Now,
                        Creator = survey.Creator,
                        EndTime = survey.EndTime,
                        ExamPaperID = survey.ExamPaperID,
                        LimitTime = survey.LimitTime,
                        OwnerOrg = survey.OwnerOrg,
                        Status = 1,
                        Title = survey.Title,
                        Category = survey.Category,
                        ComprehensiveScore = survey.ComprehensiveScore
                    };
                    surveyService.SaveOrUpdate(surveyChild);
                }
                 repository.ExecuteSql<SurveyResult>(string.Format(@"insert into LA_SurveyResult
select NEWID(),t1.ID,t2.Tester,t2.Score,t2.Comment,t2.Scorer,t2.ScoreTime,t2.AssessmentRoleID,t2.Status,t2.IsLock,t2.OwnerOrg,t2.StartTime,t2.EntTime,t2.RemainTime  from LA_SurveyResult t2 
left join LA_Survey t1 on t1.ParentID='{0}'  
where t2.SurveyID='{0}'", surveyID));
              

                trans.Commit();
            }
         
            ClearCache(typeof(Survey));
            ClearCache(typeof(SurveyResult));
        }


        /// <summary>
        /// 取得测评活动相关的某个评估人待评的人数
        /// </summary>
        /// <param name="surveyID">当前评分子活动ID</param>
        /// <returns></returns>
        public int GetNotTesterNum(string surveyID,string userID)
        {
          object ret=  repository.ExecuteScalar<SurveyResult>(string.Format(@"select COUNT(1) from LA_SurveyResult where SurveyID in(
select id from LA_Survey where ParentID ='{0}') and Tester='{1}' and status=1", surveyID,userID));
          return ret.ToInt(0);
        }


        #endregion
		
		#region Internal Methods

        #endregion
    }
}