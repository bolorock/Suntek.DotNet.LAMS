#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Assessment
 * Module:  Subject
 * Descrption:
 * CreateDate: 2010/11/18 14:01:00
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using log4net;

using EAFrame.Core;
using EAFrame.Core.Caching;
using EAFrame.Core.Service;
using EAFrame.Core.Enums;
using EAFrame.Core.Data;
using EAFrame.Core.DataFilter;
using SunTek.Assessment.Domain;

namespace SunTek.Assessment.Service
{
    public class SubjectService :  BaseService<string,Subject>
    {
		#region Fields
		private readonly ILog log = LogManager.GetLogger(typeof(SubjectService));
		#endregion
		
		#region Constructors
		
		public SubjectService(){ }
		#endregion

        #region ISubjectService Imp
        /// <summary>
        /// 删除题目
        /// </summary>
        /// <param name="entity">题目实体</param>
        public void Delete(Subject entity)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Subject)))
            {
                SubjectItemService subjectItemService = new SubjectItemService();
                IList<Subject> subSubjects = base.All().Where(o => o.ParentID.Equals(entity.ID, StringComparison.OrdinalIgnoreCase)).ToList();
                
                foreach (Subject subject in subSubjects)
                {
                    base.Delete(subject);
                }

                IList<SubjectItem> subjectItems = subjectItemService.All().Where(p =>p.SubjectID==entity.ID).ToList();
                
                repository.Clear<Subject>();

                foreach (var p in subjectItems)
                {
                    subjectItemService.Delete(p);
                }

                base.Delete(entity);

                trans.Commit();
            }

            ClearCache(typeof(Subject));
            ClearCache(typeof(SubjectItem));
          
        }

        public void Delete(string subjectID)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Subject)))
            {
                repository.ExecuteSql<Subject>(string.Format("delete from LA_Subject where ParentID='{0}' ", subjectID));
                repository.ExecuteSql<Subject>(string.Format("delete from LA_Subject where ID='{0}' ", subjectID));
                repository.ExecuteSql<Subject>(string.Format("delete from LA_SubjectItem where subjectID='{0}' ", subjectID));
                trans.Commit();
            }

            ClearCache(typeof(Subject));
            ClearCache(typeof(SubjectItem));

        }

        /// <summary>
        /// 保存题目
        /// </summary>
        /// <param name="entity">题目实体</param>
        public override void SaveOrUpdate(Subject entity)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Subject)))
            {
                repository.Clear<Subject>();
                repository.SaveOrUpdate(entity);
                repository.ExecuteSql<Subject>(string.Format("delete from LA_SubjectItem where SubjectID='{0}' ", entity.ID));
                repository.ExecuteSql<Subject>(string.Format("delete from LA_Subject where ParentID='{0}' or ParentID in (select ID from LA_Subject where ParentID='{0}') ", entity.ID));
                //保存选项
                if (entity.SubjectItems != null)
                {
                   // repository.ExecuteSql<Subject>(string.Format("delete from LA_SubjectItem where SubjectID='{0}' ", entity.ID));
                    SubjectItemService subjectItemService = new SubjectItemService();
                    foreach (SubjectItem subjectItem in entity.SubjectItems)
                    {
                        if (!string.IsNullOrEmpty(subjectItem.ItemTitle))
                        {
                            subjectItem.SubjectID = entity.ID;
                            subjectItemService.SaveOrUpdate(subjectItem);
                        }
                    }
                }

                //保存子题目
                if (entity.SubSubjects != null)
                {
                   // repository.ExecuteSql<Subject>(string.Format("delete from LA_Subject where ParentID='{0}' or ParentID in (select ID from LA_Subject where ParentID='{0}') ", entity.ID));
                    foreach (Subject subject in entity.SubSubjects)
                    {
                        if (string.IsNullOrEmpty(subject.SubjectTitle)) continue;
                        subject.ID = IdGenerator.NewComb().ToString();
                        subject.ParentID = entity.ID;
                        subject.OwnerOrg = entity.OwnerOrg;
                        subject.Creator = entity.Creator;
                        subject.CreateTime = entity.CreateTime;
                        subject.Category = entity.Category;
                        repository.SaveOrUpdate(subject);

                        //保存子题目
                        if (subject.SubSubjects != null)
                        {
                            repository.ExecuteSql<Subject>(string.Format("delete from LA_Subject where ParentID='{0}' ", subject.ID));
                            foreach (Subject subsubject in subject.SubSubjects)
                            {
                                if (string.IsNullOrEmpty(subsubject.SubjectTitle)) continue;
                                subsubject.ID = IdGenerator.NewComb().ToString();
                                subsubject.ParentID = subject.ID;
                                subsubject.OwnerOrg = entity.OwnerOrg;
                                subsubject.Creator = entity.Creator;
                                subsubject.CreateTime = entity.CreateTime;
                                subsubject.Category = entity.Category;
                                repository.SaveOrUpdate(subsubject);
                            }
                        }

                    }
                }



                trans.Commit();
            }

            ClearCache(typeof(Subject));
            ClearCache(typeof(SubjectItem));

            //if (entity.SubjectItems != null && entity.SubjectItems.Count > 0)
            //{
            //    ClearCache(typeof(SubjectItem));
            //}
        }
        #endregion
		
		#region Internal Methods

        #endregion
    }
}