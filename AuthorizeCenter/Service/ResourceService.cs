#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: AuthorizeCenter
 * Module:  Resource
 * Descrption:
 * CreateDate: 2010/11/18 13:55:34
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using log4net;

using EAFrame.Core;
using EAFrame.Core.Data;
using EAFrame.Core.Extensions;
using EAFrame.Core.Caching;
using EAFrame.Core.Service;
using EAFrame.Core.Enums;
using EAFrame.Core.DataFilter;
using SunTek.EAFrame.AuthorizeCenter.Domain;

namespace SunTek.EAFrame.AuthorizeCenter.Service
{
    public class ResourceService : BaseService<string, Resource>
    {
        #region Fields
        private readonly ILog log = LogManager.GetLogger(typeof(ResourceService));
        #endregion

        #region Constructors

        public ResourceService() { }
        #endregion

        #region IResourceService Imp
        /// <summary>
        /// 删除资源
        /// </summary>
        /// <param name="entity">资源实体</param>
        public void Delete(Resource entity)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Resource)))
            {
                PrivilegeService privilegeService = new PrivilegeService();
                IList<Privilege> previleges = privilegeService.All().Where(p => p.ResourceID == entity.ID).ToList();

                repository.Clear<Resource>();

                OperateService operateService = new OperateService();
                foreach (var p in previleges)
                {
                    if (!string.IsNullOrWhiteSpace(p.OperateID))
                        operateService.Delete(p.OperateID);

                    privilegeService.Delete(p);
                }

                base.Delete(entity);

                trans.Commit();
            }

            ClearCache(typeof(Resource));
            ClearCache(typeof(Operate));
            ClearCache(typeof(Privilege));
        }

        /// <summary>
        /// 保存资源
        /// </summary>
        /// <param name="entity">资源实体</param>
        public override void SaveOrUpdate(Resource entity)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Resource)))
            {
                repository.Clear<Resource>();
                repository.SaveOrUpdate(entity);

                IDictionary<string, object> parameters = new Dictionary<string, object>();
                parameters.Add("ResourceID", entity.ID);
                parameters.Add("OperateID", string.Empty);
                Privilege privilege = repository.FindOne<Privilege>(parameters);
                if (privilege == null)
                {
                    repository.SaveOrUpdate(new Privilege()
                    {
                        ID = IdGenerator.NewComb().ToString(),
                        AppID = entity.AppID,
                        MetaDataID = string.Empty,
                        ModuleID = entity.ModuleID,
                        Name = entity.Text,
                        OperateID = string.Empty,
                        OwnerOrg = entity.OwnerOrg,
                        ResourceID = entity.ID,
                        SortOrder = entity.SortOrder,
                        Description = entity.Description,
                        Type = entity.Type,
                        CreateTime = DateTime.Now,
                        Creator = entity.Creator,
                    });
                }

                if (entity.Operates != null)
                {
                    repository.ExecuteSql<Resource>(string.Format("delete from AC_Operate where id in (select OperateID from AC_Privilege where ResourceID='{0}' and (OperateID is not null and OperateID<>'')) ", entity.ID));
                    repository.ExecuteSql<Resource>(string.Format("delete from AC_Privilege where ResourceID='{0}' and (OperateID is not null and OperateID<>'')", entity.ID));

                    foreach (var operate in entity.Operates)
                    {
                        repository.SaveOrUpdate(operate);
                        repository.SaveOrUpdate(new Privilege()
                        {
                            ID = IdGenerator.NewComb().ToString(),
                            AppID = entity.AppID,
                            MetaDataID = string.Empty,
                            ModuleID = entity.ModuleID,
                            Name = operate.OperateName,
                            OperateID = operate.ID,
                            OwnerOrg = entity.OwnerOrg,
                            ResourceID = entity.ID,
                            SortOrder = operate.SortOrder,
                            Description = entity.Description,
                            Type = 3,
                            CreateTime = DateTime.Now,
                            Creator = entity.Creator,
                        });
                    }
                }

                trans.Commit();
            }

            ClearCache(typeof(Resource));
            ClearCache(typeof(Privilege));
            ClearCache(typeof(Operate));
        }
        #endregion

        #region Internal Methods

        #endregion
    }
}