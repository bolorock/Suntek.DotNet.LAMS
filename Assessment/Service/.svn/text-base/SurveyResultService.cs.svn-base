#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Assessment
 * Module:  SurveyResult
 * Descrption:
 * CreateDate: 2010/11/18 14:01:00
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;
using log4net;

using EAFrame.Core;
using EAFrame.Core.Caching;
using EAFrame.Core.Data;
using EAFrame.Core.Extensions;
using EAFrame.Core.Service;
using EAFrame.Core.Enums;
using EAFrame.Core.DataFilter;
using SunTek.Assessment.Domain;
using EAFrame.Core.Data;
using System.Data;

namespace SunTek.Assessment.Service
{
    public class SurveyResultService :  BaseService<string,SurveyResult>
    {
		#region Fields
		private readonly ILog log = LogManager.GetLogger(typeof(SurveyResultService));
		#endregion
		
		#region Constructors
		
		public SurveyResultService(){ }
		#endregion

        #region ISurveyResultService Imp
        /// <summary>
        /// 保存评估人
        /// </summary>
        /// <param name="surveyID"></param>
        /// <param name="surveyResults"></param>
        public void SaveSurveyResults(string surveyID, IList<SurveyResult> surveyResults)
        {
            IDictionary<string, object> dic = new Dictionary<string, object>();
            dic.Add("SurveyID", surveyID);
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Survey)))
            {

                SurveyResultService surveyResultService = new SurveyResultService();
                foreach (var p in surveyResults)
                {
                    dic.Add("Tester", p.Tester);
                    if (surveyResultService.FindOne(dic) == null)
                    {
                        surveyResultService.SaveOrUpdate(p);
                    }
                    dic.Remove("Tester");
                }
                trans.Commit();
            }
            ClearCache(typeof(Survey));
            ClearCache(typeof(SurveyResult));
        }

        /// <summary>
        /// 获取所有评估人
        /// </summary>
        /// <param name="surveyID"></param>
        /// <param name="pageInfo"></param>
        /// <returns></returns>
        public DataTable GetSurveyResult(string surveyID, PageInfo pageInfo)
        {
            try
            {
                string cmdText = string.Format(@" select a.ID, b.Code,b.Name,a.Status,a.IsLock,d.Value as RoleName,c.RoleID as RoleID from LA_SurveyResult a 
join OM_Employee b on a.Tester=b.ID
left join LA_AssessmentRoleWeight c on a.AssessmentRoleID=c.ID
left join (select f.ID,f.Value from AB_Dict e join AB_DictItem f on e.ID=f.DictID where e.Name='AssessRole') d on d.ID=c.RoleID
where a.SurveyID='{0}'", surveyID);
                return repository.ExecuteDataTable<SurveyResult>(cmdText, null,"RoleID", pageInfo);
            }
            catch (Exception ex)
            {
                log.Error("获取评估人出错！", ex);
                return null;
               
            }

        }

        public void SaveImportSurveyResult(SurveyResultModel model, out string strError)
        {
            strError = string.Empty;
            Dictionary<string, object> paramers = new Dictionary<string, object>();
            paramers.Add("SurveyID",model.SurveyID);
            foreach (var item in model.SurveyResults)
            {
                if (string.IsNullOrWhiteSpace(item.Comment))
                {
                    strError += string.Format("找不到人员编号为【{0}】的评估人，不能导入！<br>", item.Tester);
                    continue; 
                }
                paramers.Add("Tester", item.Comment);
                SurveyResult surveyResult = repository.FindOne<SurveyResult>(paramers);
                paramers.Remove("Tester");
                if (surveyResult == null)
                {
                    item.ID = IdGenerator.NewComb().ToSafeString();
                }
                else
                {
                    strError += string.Format("人员编号为【{0}】的评估人已经存在,不能再导入！<br>", item.Tester);
                    continue;
                }
                item.SurveyID = model.SurveyID;
                item.OwnerOrg = model.OwnerOrg;
                item.RemainTime = model.RemainTime*60;
                item.EntTime = model.EntTime;
                item.ScoreTime = model.ScoreTime;
                item.StartTime = model.StartTime;
                item.Tester = item.Comment;
                item.AssessmentRoleID = model.AssessmentRoleID;
                item.Comment = null;

                repository.SaveOrUpdate(item);
            }

        }

        public DataTable GetSurveyResultAndUser(string surveyID)
        {
            try
            {
                string cmdText = string.Format(@" select t1.ID,t1.SurveyID,t1.Tester,t2.Code,t2.Name,t2.LoginName,t2.ID from LA_SurveyResult t1 
join OM_Employee t2 on t1.Tester=t2.ID 
where t1.SurveyID='{0}'", surveyID);
                return repository.ExecuteDataTable<SurveyResult>(cmdText);
            }
            catch (Exception ex)
            {
                log.Error("获取评估人出错！", ex);
                return null;

            }

        }



        /// <summary>
        ///  操作解锁与加锁
        /// </summary>
        /// <param name="expertID"></param>
        /// <param name="isLock"></param>
        public void ChangeLock(string surveyID, int isLock)
        {
            string cmdText = "";
            if (isLock == 0)//解锁
            {
                cmdText = string.Format("update LA_SurveyResult set IsLock=0,Status=1 where SurveyID in (select ID from LA_Survey where ParentID=(select surveyID from la_surveyResult where id='{0}') or id=(select surveyID from la_surveyResult where id='{0}')) and Tester=(select Tester from la_surveyResult where id='{0}')", surveyID);
            }

            else
            {

                cmdText = string.Format("update LA_SurveyResult set IsLock=1 where SurveyID in (select ID from LA_Survey where ParentID=(select surveyID from la_surveyResult where id='{0}')  or id=(select surveyID from la_surveyResult where id='{0}')) and Tester=(select Tester from la_surveyResult where id='{0}')", surveyID);
            }
            repository.ExecuteSql<SurveyResult>(cmdText);
            ClearCache(typeof(SurveyResult));
        }




        #endregion
		
		#region Internal Methods

        #endregion
    }
}