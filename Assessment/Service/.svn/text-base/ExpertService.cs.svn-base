#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: EAFrame.Assessment
 * Module:  AssessmentRole
 * Descrption:
 * CreateDate: 2011-1-27 10:50:43
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;
using log4net;

using EAFrame.Core;
using EAFrame.Core.Caching;
using EAFrame.Core.Service;
using EAFrame.Core.Enums;
using EAFrame.Core.DataFilter;
using SunTek.Assessment.Domain;
using EAFrame.Core.Extensions;
using EAFrame.Core.Data;

namespace SunTek.Assessment.Service
{
    public class ExpertService : BaseService<string, Expert>
    {
		#region Fields
		private readonly ILog log = LogManager.GetLogger(typeof(ExpertService));
		#endregion
		
		#region Constructors

        public ExpertService() { }
		#endregion

        #region IExpertService Imp



        /// <summary>
        /// 获取所有评估人，要分页
        /// </summary>
        /// <param name="surveyID"></param>
        /// <param name="pageInfo"></param>
        /// <returns></returns>
        public DataTable GetSurveyExpert(IDictionary<string, object> para, PageInfo pageInfo)
        {
            try
            {
                string cmdText = string.Format(@" select a.ID, b.Code,b.Name,a.Status,a.IsLock,b.LoginName,b.ID as userID,a.Tester,a.Scorer  from 
LA_Expert a
join OM_Employee b on a.Scorer=b.ID");
                if (pageInfo == null)
                    return repository.ExecuteDataTable<Expert>(cmdText, para);
                else
                    return repository.ExecuteDataTable<Expert>(cmdText, para, pageInfo);

            }
            catch (Exception ex)
            {
                log.Error("获取专家出错！", ex);
                return null;
            }
        }

        /// <summary>
        ///  操作解锁与加锁
        /// </summary>
        /// <param name="expertID"></param>
        /// <param name="isLock"></param>
        public void ChangeLock(string expertID,int isLock)
        {
            string cmdText = "";
            if (isLock == 0)//解锁
            {
                cmdText = string.Format("update  LA_Expert set IsLock=0,Status=1 where SurveyID=(select SurveyID from LA_Expert where  ID='{0}') and Scorer=(select Scorer from LA_Expert where  ID='{0}')", expertID);
            }

            else
            {
                cmdText = string.Format("update  LA_Expert set IsLock=1 where SurveyID=(select SurveyID from LA_Expert where  ID='{0}') and Scorer=(select Scorer from LA_Expert where  ID='{0}')", expertID);
            }
                repository.ExecuteSql<Expert>(cmdText);

    }

        /// <summary>
        /// 获取所有评估人，要分页
        /// </summary>
        /// <param name="surveyID"></param>
        /// <param name="pageInfo"></param>
        /// <returns></returns>
        public DataTable GetSurveyExpert(string surveyID, PageInfo pageInfo)
        {
            try
            {
                IDictionary<string, object> para =new Dictionary<string,object>();
                para.SafeAdd("Tester", new Condition("a.Tester='-1'"));
                para.SafeAdd("SurveyID", new Condition( string.Format("a.SurveyID='{0}'",surveyID)));
                return GetSurveyExpert(para,pageInfo);

            }
            catch (Exception ex)
            {
                log.Error("获取专家出错！", ex);
                return null;
            }
        }
        /// <summary>
        /// 获取所有评估人，要分页
        /// </summary>
        /// <param name="surveyID"></param>
        /// <param name="pageInfo"></param>
        /// <returns></returns>
        public DataTable GetSurveyExpert(string surveyID)
        {
            try
            {
                IDictionary<string, object> para =new Dictionary<string,object>();
                para.SafeAdd("Tester", new Condition("a.Tester='-1'"));
                para.SafeAdd("SurveyID", new Condition( string.Format("a.SurveyID='{0}'",surveyID)));
                return GetSurveyExpert(para,null);

            }
            catch (Exception ex)
            {
                log.Error("获取专家出错！", ex);
                return null;
            }
        }

        /// <summary>
        /// 获取所有要被评分的人
        /// </summary>
        /// <param name="para"></param>
        /// <param name="pageInfo"></param>
        /// <returns></returns>
        public DataTable GetSurveyExpertScore(IDictionary<string, object> para, PageInfo pageInfo)
        {
            try
            {
                string cmdText = string.Format(@" select t1.ID,t1.SurveyID,t1.Tester,t1.Status,t1.IsLock,t2.Name,t3.Title,t1.CreateTime from LA_Expert t1
 join OM_Employee t2 on t1.Tester=t2.ID
join LA_Survey t3 on t1.SurveyID=t3.ID");
                return repository.ExecuteDataTable<Expert>(cmdText, para, "SurveyID", pageInfo);
            }
            catch (Exception ex)
            {
                log.Error("获取专家出错！", ex);
                return null;
            }
        }



        /// 
        /// </summary>
        /// <param name="surveyID"></param>
        public void Publish(string surveyID)
        {
          

            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Expert)))
            {
                repository.ExecuteSql<Expert>(string.Format(@"insert into LA_Expert
select NEWID() id,t1.SurveyID,t2.Tester,t1.Scorer,1,0,t1.OwnerOrg,GETDATE() from LA_Expert t1
left join LA_SurveyResult t2 on t1.SurveyID=t2.SurveyID
where t1.SurveyID='{0}' and t1.Status=0", surveyID));
                repository.ExecuteSql<Expert>(string.Format("update LA_Expert set Status=1  where SurveyID='{0}'", surveyID));
                trans.Commit();
            }


            ClearCache(typeof(Expert));
        }


        public void DeleteExpert(Expert expert)
        {
            repository.ExecuteSql<Expert>(string.Format("delete from LA_Expert where SurveyID='{0}' and Scorer='{1}'", expert.SurveyID, expert.Scorer));

            ClearCache(typeof(Expert));
        }

        /// <summary>
        /// 保存评估人
        /// </summary>
        /// <param name="surveyID"></param>
        /// <param name="surveyResults"></param>
        public void SaveSurveyExperts(string surveyID, IList<Expert> experts)
        {
            IDictionary<string, object> dic = new Dictionary<string, object>();
            dic.Add("SurveyID", surveyID);
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Expert)))
            {

                ExpertService expertService = new ExpertService();
                foreach (var p in experts)
                {
                    dic.Add("Scorer", p.Scorer);
                    if (expertService.FindOne(dic) == null)
                    {
                        expertService.SaveOrUpdate(p);
                    }
                    dic.Remove("Scorer");
                }
                trans.Commit();
            }
            ClearCache(typeof(Expert));
        }



        public void SaveImportExpert(SurveyResultModel model, out string strError)
        {
            Expert expert = new Expert();
            strError = string.Empty;
            Dictionary<string, object> paramers = new Dictionary<string, object>();
            paramers.Add("SurveyID", model.SurveyID);
            foreach (SurveyResult item in model.SurveyResults)
            {
                if (string.IsNullOrWhiteSpace(item.Comment))
                {
                    strError += string.Format("找不到人员编号为【{0}】的评估人，不能导入！<br>", item.Tester);
                    continue;
                }
                paramers.SafeAdd("Scorer", item.Comment);
                paramers.SafeAdd("SurveyID", item.SurveyID);

                Expert surveyResult = repository.FindOne<Expert>(paramers);

                paramers.Remove("Scorer");
                if (surveyResult == null)
                {
                    item.ID = IdGenerator.NewComb().ToSafeString();
                }
                else
                {
                    strError += string.Format("人员编号为【{0}】的评分人已经存在,不能再导入！<br>", item.Tester);
                    continue;
                }


                expert = new Expert()
                {
                    Tester = "-1",
                    CreateTime = DateTime.Now,
                    ID = item.ID,
                    SurveyID = item.SurveyID,
                    Scorer = item.Comment,
                    Status = 0,
                    IsLock = 0,
                    OwnerOrg = item.OwnerOrg

                };

                repository.SaveOrUpdate(expert);
            }

        }

        #endregion
		
		#region Internal Methods

        #endregion
    }
}