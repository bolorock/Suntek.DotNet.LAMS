#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: LAMS
 * Module:  LAMS
 * Descrption:Excel Util
 * CreateDate: 2010-11-2 21:36:52
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Reflection;
using System.Collections;
using System.Xml.Linq;

using EAFrame.Core.Extensions;
using SunTek.LAMS.Domain;
using EAFrame.Core.FastInvoker;
using log4net;

namespace SunTek.LAMS.Uitl
{
    /// <summary>
    /// Excel导入工具类
    /// </summary>
    public class ExcelUtil
    {
        static ILog log = LogManager.GetLogger(typeof(ExcelUtil));

        #region 从Excel导入
        /// <summary>
        /// 从Execel创建对象
        /// </summary>
        /// <typeparam name="TModel">对象类型</typeparam>
        /// <param name="template">Excel模板</param>
        /// <param name="func">处理Excel单元格信息函数</param>
        /// <param name="rowcount">行数</param>
        /// <returns></returns>
        public static TModel CreateFromExcel<TModel>(string template, Func<int, int, object> func, int rowcount = 0) where TModel : class, new()
        {
            XElement xElem = XElement.Load(template);
            TModel model = new TModel();
            Type type = typeof(TModel);

            foreach (var pi in type.GetProperties())
            {
                try
                {
                    XElement xTmp = xElem.Element(pi.Name);
                    if (xTmp == null) continue;

                    object value = null;
                    if (pi.PropertyType.IsGenericType && pi.PropertyType.GetGenericTypeDefinition() == typeof(List<>))
                    {
                        value = CreateArrayFromExcel(pi.PropertyType, xTmp, func, rowcount);
                    }
                    else if (pi.PropertyType.IsClass && !pi.PropertyType.IsValueType && pi.PropertyType != typeof(string))
                    {
                        value = CreateFromExcel(pi.PropertyType, xTmp, func);
                    }
                    else
                    {
                        if (xTmp != null && xTmp.Attribute("row") != null && xTmp.Attribute("column") != null)
                        {
                            value = func(xTmp.Attribute("row").Value.ToInt(), xTmp.Attribute("column").Value.ToInt());
                        }
                    }

                    pi.SetValue(model, Cast(value, pi.PropertyType), null);
                }
                catch (Exception ex)
                {
                    log.Error(ex);
                    //throw;
                }
            }

            return model;
        }

        /// <summary>
        /// 从Execel创建对象
        /// </summary>
        /// <param name="destType">目标类型</param>
        /// <param name="xElem">xml元素</param>
        /// <param name="func">处理Excel单元格信息函数</param>
        /// <param name="rowcount">行数</param>
        /// <returns></returns>
        public static object CreateArrayFromExcel(Type destType, XElement xElem, Func<int, int, object> func, int rowCount = 0)
        {
            if (!(destType.IsGenericType && destType.GetGenericTypeDefinition() == typeof(List<>)) || xElem == null) return null;

            Type genericType = typeof(List<>);
            Type memberType = destType.GetGenericArguments()[0];
            Type constructedType = genericType.MakeGenericType(memberType);
            object model = Activator.CreateInstance(constructedType);

            List<object> items = new List<object>();
            //foreach (var xTmp in xElem.Elements())
            //{
            //    if (memberType.IsClass && !memberType.IsValueType && memberType != typeof(string))
            //    {
            //        object value = CreateFromExcel(memberType, xElem.Element(memberType.Name), func);
            //        items.Add(value);
            //    }
            //}
            var count = 0;
            if (rowCount != 0)
            {
                count = rowCount;
            }
            else
            {
                count = xElem.Attribute("count").Value.ToInt(1);
            }
            var xTmp = xElem.Element(memberType.Name);
            for (int offset = 0; offset < count; offset++)
            {
                if (memberType.IsClass && !memberType.IsValueType && memberType != typeof(string))
                {
                    object value = CreateFromExcel(memberType, xTmp, offset, func);
                    items.Add(value);
                }
            }

            try
            {
                MethodInfo mi = destType.GetMethod("Add");
                items.Select(o => mi.Invoke(model, new object[] { o })).ToArray();
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw;
            }

            return model;
        }

        /// <summary>
        /// 从Execel创建对象
        /// </summary>
        /// <param name="destType">目标类型</param>
        /// <param name="xElem">xml元素</param>
        /// <param name="offset">偏移量</param>
        /// <param name="func">处理Excel单元格信息函数</param>
        /// <returns></returns>
        public static object CreateFromExcel(Type destType, XElement xElem, int offset, Func<int, int, object> func)
        {
            if (!destType.IsClass || xElem == null) return null;

            object model = Activator.CreateInstance(destType);
            foreach (var pi in destType.GetProperties())
            {
                XElement xTmp = xElem.Element(pi.Name);
                object value = null;
                if (pi.PropertyType.IsClass && !pi.PropertyType.IsValueType && pi.PropertyType != typeof(string))
                {
                    value = CreateFromExcel(pi.PropertyType, xTmp,offset,func); //xTmp.Element(xTmp.Name.LocalName)
                }
                else
                {
                    if (xTmp != null && xTmp.Attribute("row") != null && xTmp.Attribute("column") != null)
                    {
                        value = func(xTmp.Attribute("row").Value.ToInt() + offset, xTmp.Attribute("column").Value.ToInt());
                    }
                }

                try
                {
                    pi.SetValue(model, Cast(value, pi.PropertyType), null);
                }
                catch (Exception ex)
                {
                    log.Error(ex);
                    throw;
                }
            }


            return model;
        }


        /// <summary>
        /// 从Execel创建对象
        /// </summary>
        /// <param name="destType">目标类型</param>
        /// <param name="xElem">xml元素</param>
        /// <param name="func">处理Excel单元格信息函数</param>
        /// <returns></returns>
        public static object CreateFromExcel(Type destType, XElement xElem, Func<int, int, object> func)
        {
            if (!destType.IsClass || xElem == null) return null;

            object model = Activator.CreateInstance(destType);
            foreach (var pi in destType.GetProperties())
            {
                XElement xTmp = xElem.Element(pi.Name);
                object value = null;
                if (pi.PropertyType.IsClass && !pi.PropertyType.IsValueType && pi.PropertyType != typeof(string))
                {
                    value = CreateFromExcel(pi.PropertyType, xTmp.Element(xTmp.Name.LocalName), func);
                }
                else
                {
                    if (xTmp != null && xTmp.Attribute("row") != null && xTmp.Attribute("column") != null)
                    {
                        value = func(xTmp.Attribute("row").Value.ToInt(), xTmp.Attribute("column").Value.ToInt());
                    }
                }

                try
                {
                    pi.SetValue(model, Cast(value, pi.PropertyType), null);
                }
                catch (Exception ex)
                {
                    log.Error(ex);
                    throw;
                }
            }

            return model;
        }

        public static object Cast(object objValue, Type type)
        {
            if (objValue == null) return null;
            try
            {
                return Convert.ChangeType(objValue, type);
            }
            catch (Exception ex)
            {
                log.Error(ex);
            }

            if (type.IsValueType) return 0;
            return null;
        }
        #endregion

        #region 由Excel导出
        /// <summary>
        /// 从Execel插入对象
        /// </summary>
        /// <typeparam name="TModel">对象类型</typeparam>
        /// <param name="template">Excel模板</param>
        /// <param name="model">插入的对象</param>
        /// <param name="action">处理Excel单元格信息函数</param>
        /// <returns></returns>
        public static void InsertFromExcel<TModel>(string template, TModel model, Action<int, int, object> action) where TModel : class, new()
        {
            XElement xElem = XElement.Load(template);
            Type type = typeof(TModel);

            foreach (var pi in type.GetProperties()) //遍历对象所有属性
            {
                try
                {
                    XElement xTmp = xElem.Element(pi.Name);
                    if (xTmp == null) continue;

                    object value = pi.GetValue(model, null);
                    if (pi.PropertyType.IsGenericType && pi.PropertyType.GetGenericTypeDefinition() == typeof(List<>))
                    {
                        CreateArrayFromExcel(pi.PropertyType, value, xTmp, action);
                    }
                    else if (pi.PropertyType.IsClass && !pi.PropertyType.IsValueType && pi.PropertyType != typeof(string))
                    {
                        InsertFromExcel(pi.PropertyType, value, xTmp, action);
                    }
                    else
                    {
                        if (xTmp != null && xTmp.Attribute("row") != null && xTmp.Attribute("column") != null)
                        {
                            action(xTmp.Attribute("row").Value.ToInt(), xTmp.Attribute("column").Value.ToInt(), value);
                        }
                    }

                    pi.SetValue(model, Cast(value, pi.PropertyType), null);
                }
                catch (Exception ex)
                {
                    log.Error(ex);
                    //throw;
                }
            }
        }


        /// <summary>
        /// 从Execel插入对象
        /// </summary>
        /// <param name="destType">目标类型</param>
        /// <param name="model">插入的对象</param>
        /// <param name="xElem">xml元素</param>
        /// <param name="action">处理Excel单元格信息函数</param>
        /// <returns></returns>
        public static void CreateArrayFromExcel(Type destType, object model, XElement xElem, Action<int, int, object> action)
        {
            if (!(destType.IsGenericType && destType.GetGenericTypeDefinition() == typeof(List<>)) || xElem == null) return;
            try
            {
                Type genericType = typeof(List<>);
                Type memberType = destType.GetGenericArguments()[0];
                Type constructedType = genericType.MakeGenericType(memberType);

                if (model is IEnumerable)
                {
                    IEnumerable enumerable = model as IEnumerable;

                    IEnumerator e = enumerable.GetEnumerator();
                    int offset = 0;
                    while (e.MoveNext())
                    {
                        object value = e.Current;
                        var xTmp = xElem.Element(memberType.Name);
                        if (memberType.IsClass && !memberType.IsValueType && memberType != typeof(string))
                        {
                            InsertFromExcel(memberType, value, xTmp, offset, action);
                        }
                        offset++;
                    }
                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw;
            }
        }

        /// <summary>
        /// 从Execel插入对象
        /// </summary>
        /// <param name="destType">目标类型</param>
        /// <param name="model">插入的对象</param>
        /// <param name="xElem">xml元素</param>
        /// <param name="offset">偏移量</param>
        /// <param name="action">处理Excel单元格信息函数</param>
        /// <returns></returns>
        public static void InsertFromExcel(Type destType, object model, XElement xElem, int offset, Action<int, int, object> action)
        {
            try
            {
                if (!destType.IsClass || xElem == null) return;

                foreach (var pi in destType.GetProperties())
                {
                    XElement xTmp = xElem.Element(pi.Name);
                    object value = pi.GetValue(model, null);
                    if (pi.PropertyType.IsClass && !pi.PropertyType.IsValueType && pi.PropertyType != typeof(string))
                    {
                        InsertFromExcel(pi.PropertyType, model, xTmp.Element(xTmp.Name.LocalName), action);
                    }
                    else
                    {
                        if (xTmp != null && xTmp.Attribute("row") != null && xTmp.Attribute("column") != null)
                        {
                            action(xTmp.Attribute("row").Value.ToInt() + offset, xTmp.Attribute("column").Value.ToInt(), value);
                        }
                    }


                }
            }
            catch (Exception ex)
            {
                log.Error(ex);
                throw;
            }
        }

        /// <summary>
        /// 从Execel创建对象
        /// </summary>
        /// <param name="destType">目标类型</param>
        /// <param name="action">插入的对象</param>
        /// <param name="xElem">xml元素</param>
        /// <param name="func">处理Excel单元格信息函数</param>
        /// <returns></returns>
        public static void InsertFromExcel(Type destType, object model, XElement xElem, Action<int, int, object> action)
        {
            if (!destType.IsClass || xElem == null) return;
            foreach (var pi in destType.GetProperties())
            {
                try
                {
                    XElement xTmp = xElem.Element(pi.Name);
                    object value = pi.GetValue(model, null);
                    if (pi.PropertyType.IsClass && !pi.PropertyType.IsValueType && pi.PropertyType != typeof(string))
                    {
                        InsertFromExcel(pi.PropertyType, model, xTmp.Element(xTmp.Name.LocalName), action);
                    }
                    else
                    {
                        if (xTmp != null && xTmp.Attribute("row") != null && xTmp.Attribute("column") != null)
                        {
                            action(xTmp.Attribute("row").Value.ToInt(), xTmp.Attribute("column").Value.ToInt(), value);
                        }
                    }
                }
                catch (Exception ex)
                {
                    log.Error(ex);
                    throw;
                }
            }
        }

        #endregion
    }
}
