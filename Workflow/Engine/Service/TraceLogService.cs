#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Workflow
 * Module:  TraceLog
 * Descrption:
 * CreateDate: 2010/11/18 14:21:45
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;
using log4net;

using EAFrame.Core;
using EAFrame.Core.Caching;
using EAFrame.Core.Service;
using EAFrame.Core.Enums;
using EAFrame.Core.DataFilter;
using EAFrame.Workflow.Domain;

namespace EAFrame.Workflow.Service
{
    public class TraceLogService :  BaseService<string,TraceLog>
    {
		#region Fields
		private readonly ILog log = LogManager.GetLogger(typeof(TraceLogService));
		#endregion
		
		#region Constructors
		
		public TraceLogService(){ }
		#endregion

        #region ITraceLogService Imp
        public DataTable FindTraceLog(IDictionary<string, object> param, PageInfo pi)
        {
            string cmdText = @"select tl.*,pd.Name as ProcessName,pi.Name as ProcessInstName, ai.Name as ActivityInstName,wi.Name as WorkItemName,ot.UserName as OperatorName
                             from WF_TraceLog tl join WF_ProcessDef pd on tl.ProcessID = pd.ID
                             join WF_ProcessInst pi on tl.ProcessInstID = pi.ID 
                             join WF_ActivityInst ai on tl.ActivityInstID = ai.ID
                             join WF_WorkItem wi on tl.WorkItemID = wi.ID
                             join AC_Operator ot on tl.Operator = ot.ID where 1=1 ";
            if(param.ContainsKey("WorkItemName"))
            {
                cmdText = cmdText + string.Format("and wi.Name like '%{0}%'", param["WorkItemName"]);
            }
            if (param.ContainsKey("ProcessName"))
            {
                cmdText = cmdText + string.Format("and pd.Name like '%{0}%'", param["ProcessName"]);
            }
            if (param.ContainsKey("ProcessInstName"))
            {
                cmdText = cmdText + string.Format("and pi.Name like '%{0}%'", param["ProcessInstName"]);
            }
            if (param.ContainsKey("ActivityInstName"))
            {
                cmdText = cmdText + string.Format("and ai.Name like '%{0}%'", param["ActivityInstName"]);
            }
            if (param.ContainsKey("OperatorName"))
            {
                cmdText = cmdText + string.Format("and ot.UserName like '%{0}%'", param["OperatorName"]);
            }
            if (param.ContainsKey("ClientIP"))
            {
                cmdText = cmdText + string.Format("and ClientIP like '%{0}%'", param["ClientIP"]);
            }
            if (param.ContainsKey("Message"))
            {
                cmdText = cmdText + string.Format("and Message like '%{0}%'", param["Message"]);
            }
            if (param.ContainsKey("ActionType"))
            {
                cmdText = cmdText + string.Format("and ActionType = {0}", param["ActionType"]);
            }
            return repository.ExecuteDataTable<TraceLog>(cmdText, null, pi);
        }
        #endregion
		
		#region Internal Methods

        #endregion
    }
}