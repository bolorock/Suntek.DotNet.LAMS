#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: LAMS
 * Module:  CandidateManager
 * Descrption:
 * CreateDate: 2010/11/18 14:11:16
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;
using log4net;
using System.Text;

using EAFrame.Core;
using EAFrame.Core.Caching;
using EAFrame.Core.Data;
using EAFrame.Core.Extensions;
using EAFrame.Core.Service;
using EAFrame.Core.Enums;
using EAFrame.Core.DataFilter;
using SunTek.LAMS.Domain;
using SunTek.EAFrame.AuthorizeCenter.Service;
using SunTek.EAFrame.AuthorizeCenter.Domain;

namespace SunTek.LAMS.Service
{
    public class CandidateManagerService : BaseService<string, CandidateManager>
    {
        #region Fields
        private readonly ILog log = LogManager.GetLogger(typeof(CandidateManagerService));
        #endregion

        #region Constructors

        public CandidateManagerService() { }
        #endregion

        #region ICandidateManagerService Imp
        public void SaveCandidateManagerQualify(CandidateManagerModel model, out string strError)
        {
            strError = string.Empty;
            Dictionary<string, object> paramers = new Dictionary<string, object>();

            foreach (var item in model.CandidateManagers)
            {
                if (string.IsNullOrWhiteSpace(item.CandidatePost))
                {
                    strError += string.Format("人员编号为【{0}】的后备岗位为空，不能导入！<br>", item.Code);
                    continue;
                }
                paramers.Clear();
                paramers.Add("Code", item.Code);
                paramers.Add("CandidateManagerGrade", item.CandidateManagerGrade);
                paramers.Add("IsChief", item.IsChief);
                paramers.Add("CandidatePost", item.CandidatePost);
                paramers.Add("Status", new Condition(" Status<3 "));
                CandidateManager candidateManager = repository.FindOne<CandidateManager>(paramers);
                if (candidateManager == null)
                {
                    item.ID = IdGenerator.NewComb().ToSafeString();
                }
                else if (candidateManager.Status == 1 || candidateManager.Status == 2)
                {
                    strError += string.Format("人员编号为【{0}】的后备经理人入库状态为\"{1}\",不能再导入！<br>", candidateManager.Code, candidateManager.Status == 1 ? "后备汇总" : "信息入库");
                    continue;
                }
                else
                {
                    item.ID = candidateManager.ID;
                }

                item.Creator = model.Creator;
                item.CreateTime = model.CreateTime;
                item.Initor = model.Creator;
                item.InitTime = model.CreateTime;

                item.CandidateManagerGrade = model.CandidateManagerGrade;
                repository.SaveOrUpdate(item);
            }
        }
        public void SaveCandidateManager(CandidateManagerModel model, string grade, out string strError)
        {
            EmployeeService employeeService = new EmployeeService();
            ObjectRoleService objectRoleService = new ObjectRoleService();
            strError = string.Empty;
            int temp;
            Dictionary<string, object> dicEmployee = new Dictionary<string, object>();
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(Employee)))
            {
                foreach (var item in model.CandidateManagers)
                {
                    temp = 0;
                    try
                    {
                        //验证该记录是否已经存在
                        dicEmployee.Clear();
                        dicEmployee.Add("CandidateManagerGrade", grade == "grade2" ? "二级经理" : "三级经理");
                        dicEmployee.Add("Code", item.Code);
                        dicEmployee.Add("Status", new Condition(" Status<3 "));
                        IList<CandidateManager> candidateManagerList = repository.FindAll<CandidateManager>(dicEmployee);
                        if (candidateManagerList.Count == 0)
                        {
                            strError += string.Format("人员编号为【{0}】的后备资格经理不存在,不能导入！<br>", item.Code);
                            continue;
                        }

                        foreach (var entity in candidateManagerList)
                        {
                            if (entity.Status == 2)
                            {
                                strError += string.Format("人员编号为【{0}】的后备经理人入库状态为\"信息入库\",不能再导入！<br>", entity.Code);
                                continue;
                            }
                            item.ID = entity.ID;

                            item.CreateTime = entity.CreateTime;
                            item.Creator = entity.Creator;
                            item.CandidateManagerGrade = entity.CandidateManagerGrade;
                            item.IsChief = entity.IsChief;
                            item.CandidatePost = entity.CandidatePost;

                            item.Initor = model.Creator;
                            item.InitTime = model.CreateTime;

                            item.Status = 1;
                            repository.SaveOrUpdate(item);

                            IDictionary<string, object> dic = new Dictionary<string, object>();
                            dic.Add("Code", item.Code);
                            Employee employee = repository.FindOne<Employee>(dic);

                            //为后备经理人分配角色
                            string roleID = System.Configuration.ConfigurationManager.AppSettings["CandidateManagerRoleID"].ToString();
                            dic.Clear();
                            dic.Add("RoleID", roleID);
                            dic.Add("ObjectID", employee.ID);
                            ObjectRole objRole = objectRoleService.FindOne(dic);
                            if (objRole == null)
                            {
                                ObjectRole objectRole = new ObjectRole()
                                {
                                    ID = IdGenerator.NewComb().ToString(),
                                    RoleID = roleID,
                                    ObjectID = employee.ID
                                };
                                objectRoleService.SaveOrUpdate(objectRole);
                            }


                            if (temp == 0)
                            {
                                temp = 1;
                                int index = model.CandidateManagers.IndexOf(item);
                                Employee mod = model.Employees[index];
                                employee.PositionName = mod.PositionName;
                                employee.PostGrade = mod.PostGrade;
                                employeeService.Update(employee);
                            }
                        }


                    }
                    catch (Exception ex)
                    {
                        strError += string.Format("保存信息出错,人员编号为：【{0}】<br>", item.Code);
                        log.Error(string.Format("保存后备资格经理Excel数据出错,人员编号为：【{0}】", item.Code), ex);
                    }
                    trans.Commit();
                }
            }
        }

        /// <summary>
        /// 获取二,三级经理后备人员资格库
        /// </summary>
        /// <returns></returns>
        public DataTable GetCandidateManagerQualify(IDictionary<string, object> parameters, string filter, short status, string grade, PageInfo pageInfo)
        {
            try
            {
                StringBuilder cmdText = new StringBuilder();
                cmdText.Append(string.Format(@"select * from (select a.ID,a.Code,c.Name as OrgName,b.Name as EmployeeName,a.CandidateManagerGrade,
                                a.IsChief,a.CandidatePost,case a.Status when 0 then '资格入库' when 1 then '后备汇总' when 2 then '信息入库' when 3 then '已出库' end as Status,
                                (select Name from OM_Employee where ID=a.Creator) as Creator,a.CreateTime
                                from MM_CandidateManager a
                                join OM_Employee b on a.Code=b.Code
                                left join OM_Organization c on b.CorpID=c.ID where CandidateManagerGrade='{0}'", grade == "grade2" ? "二级经理" : "三级经理"));
                cmdText.Append(status == 4 ? string.Empty : string.Format(@" and a.Status={0} ", status));
                if (!string.IsNullOrWhiteSpace(filter))
                {
                    cmdText.Append(" and " + filter);
                }
                cmdText.Append(" ) temp ");
                if (parameters != null)
                {
                    if (parameters.ContainsKey("EmployeeCode"))
                    {
                        parameters.Add("Code", parameters.GetSafeValue<string>("EmployeeCode"));
                        parameters.Remove("EmployeeCode");
                    }
                }

                if (pageInfo == null)
                    return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString(), parameters);
                else
                    return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString(), parameters, "CreateTime desc", pageInfo);
            }
            catch (Exception ex)
            {
                log.Error("获取二级经理后备人员资格库出错！", ex);
                return null;
            }
        }

        /// <summary>
        /// 获取后备经理
        /// </summary>
        /// <param name="parameters"></param>
        /// <param name="pageinfo"></param>
        /// <param name="grade"></param>
        /// <param name="isChief"></param>
        /// <param name="layer"></param>
        /// <param name="corpID"></param>
        /// <returns></returns>
        public DataTable GetEmployee(IDictionary<string, object> parameters, PageInfo pageinfo, string grade = "", int isChief = -1, string layer = "", string corpID = "")
        {
            try
            {
                StringBuilder cmdText = new StringBuilder();
                cmdText.Append(string.Format(@"select * from (select a.*,b.ID as EmployeeID,b.Name as EmployeeName,
                                b.Gender,b.Birthday,DATEDIFF(year,Birthday,getdate()) as Age,b.PositionName,b.PostGrade,
                                c.FulltimeEducation,c.InserviceEducation,
                                (select Name from OM_Organization where b.CorpID=ID) as OrgName,
                                (select Name from OM_Employee where ID=a.Initor) as InitorName,
                                (select Name from OM_Organization where ID=b.MajorOrgID) as DeptName,
                                case a.Status when 0 then '资格入库' when 1 then '后备汇总' when 2 then '信息入库' end as Status1
                                from MM_CandidateManager a
                                join OM_Employee b on a.Code=b.Code
                                left join OM_Diploma c on b.ID=c.EmployeeID
                                where a.Status<>3 "));

                if (grade != string.Empty)
                    cmdText.Append(string.Format(" and CandidateManagerGrade='{0}'", grade == "grade2" ? "二级经理" : "三级经理"));
                if (isChief != -1)
                    cmdText.Append(string.Format(" and a.IsChief={0}", isChief));
                if (layer != "")
                {
                    cmdText.Append(corpID == "" ? string.Empty : string.Format(" and b.CorpID='{0}'", corpID));
                    cmdText.Append(layer == "1" ? string.Empty : (layer == "2" ? " and CandidateManagerGrade='二级经理'" : " and CandidateManagerGrade='三级经理'"));
                }

                if (layer == "" && corpID != "")
                    cmdText.Append(string.Format(" and b.CorpID in (select ID from OM_Organization where ParentID='{0}')", corpID));
                cmdText.Append(" ) temp ");

                if (parameters != null)
                {
                    if (parameters.ContainsKey("EmployeeCode"))
                    {
                        parameters.Add("Code", parameters.GetSafeValue<string>("EmployeeCode"));
                        parameters.Remove("EmployeeCode");
                    }
                }


                if (pageinfo == null)
                    return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString(), parameters);
                else
                    return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString(), parameters, "initTime desc", pageinfo);
            }
            catch (Exception ex)
            {
                log.Error("获取二，三级经理后备队伍推荐人选汇总信息出错！", ex);
                return null;
            }
        }

        /// <summary>
        /// 获取后备经理
        /// </summary>
        /// <param name="grade"></param>
        /// <param name="isChief"></param>
        /// <param name="corpID"></param>
        /// <returns></returns>
        public IList<Employee> GetEmployee(string grade, int isChief, string corpID)
        {
            try
            {
                StringBuilder cmdText = new StringBuilder();
                cmdText.Append(string.Format(@"select b.ID,b.Name
                                from MM_CandidateManager a
                                join OM_Employee b on a.Code=b.Code
                                where a.Status<>3 "));

                cmdText.Append(string.Format(" and a.CandidateManagerGrade='{0}'", grade == "grade2" ? "二级经理" : "三级经理"));
                cmdText.Append(string.Format(" and a.IsChief={0}", isChief));
                if (corpID != "")
                    cmdText.Append(string.Format(" and b.CorpID='{0}'", corpID));

                return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString()).ToList<Employee>();
            }
            catch (Exception ex)
            {
                log.Error("获取二，三级经理后备队伍推荐人选汇总信息出错！", ex);
                return null;
            }
        }

        /// <summary>
        /// 获取所有后备经理
        /// </summary>
        /// <returns></returns>
        public IList<CandidateManagerEmployee> GetAllCandidateManager()
        {
            try
            {
                StringBuilder cmdText = new StringBuilder();
                cmdText.Append(string.Format(@"select b.ID,b.Name,a.CandidateManagerGrade as Grade,a.IsChief,b.CorpID
                                from MM_CandidateManager a
                                join OM_Employee b on a.Code=b.Code
                                where a.Status<>3 "));
                return repository.ExecuteDataTable<CandidateManagerEmployee>(cmdText.ToString()).ToList<CandidateManagerEmployee>();
            }
            catch (Exception ex)
            {
                log.Error("获取二，三级经理后备队伍推荐人选汇总信息出错！", ex);
                return null;
            }
        }

        /// <summary>
        /// 获取二，三级经理后备队伍推荐人选汇总信息
        /// </summary>
        /// <param name="parameters"></param>
        /// <param name="pageInfo"></param>
        /// <returns></returns>
        public DataTable GetCandidaeManager(IDictionary<string, object> parameters, string filter, short status, string grade, PageInfo pageInfo)
        {
            try
            {
                StringBuilder cmdText = new StringBuilder();
                cmdText.Append(string.Format(@"select * from (select a.*,b.ID as EmployeeID,b.Name as EmployeeName,
                                b.Gender,b.Birthday,DATEDIFF(year,Birthday,getdate()) as Age,b.PositionName,b.PostGrade,
                                c.FulltimeEducation,c.InserviceEducation,
                                (select Name from OM_Organization where b.CorpID=ID) as OrgName,
                                (select Name from OM_Employee where ID=a.Initor) as InitorName,
                                (select Name from OM_Organization where ID=b.MajorOrgID) as DeptName
                                from MM_CandidateManager a
                                join OM_Employee b on a.Code=b.Code
                                left join OM_Diploma c on b.ID=c.EmployeeID
                                where CandidateManagerGrade='{0}'", grade == "grade2" ? "二级经理" : "三级经理"));
                cmdText.Append(status == 4 ? " and (a.Status=1 or a.Status=2)" : string.Format(" and a.Status={0}", status));
                if (!string.IsNullOrWhiteSpace(filter))
                {
                    cmdText.Append(" and " + filter);
                }

                if (parameters.Count>0)
                {
                    if (parameters.ContainsKey("EmployeeCode"))
                    {
                        string codes = parameters.GetSafeValue<string>("EmployeeCode");

                        //先去掉首位多余的逗号
                        while(codes.IndexOf(",") == 0)
                        {
                            codes=codes.Remove(0, 1);
                        }
                        while(codes.EndsWith(","))
                        {
                            codes=codes.Remove(codes.Length - 1, 1);
                        }

                        //只有一个code的情况 
                        if (codes.IndexOf(",") == -1)
                        {
                            parameters.Add("Code",codes);
                        }
                        else
                        {
                            codes = codes.Replace(",", "','");
                            cmdText.Append(string.Format(" and b.Code in ('{0}') ", codes));
                        }

                        parameters.Remove("EmployeeCode");

                    }
                }
                cmdText.Append(" ) temp ");
                if (pageInfo == null)
                    return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString(), parameters);
                else
                    return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString(), parameters, "initTime desc", pageInfo);
            }
            catch (Exception ex)
            {
                log.Error("获取二，三级经理后备队伍推荐人选汇总信息出错！", ex);
                return null;
            }
        }

        /// <summary>
        /// 后备出库
        /// </summary>
        /// <param name="code"></param>
        public void DeleteCandidateManager(string id, out string msg)
        {
            msg = string.Empty;
            try
            {
                CandidateManager candidateManager = repository.GetDomain<CandidateManager>(id);
                if (candidateManager.Status == 3)
                {
                    msg = "该记录已经出库！";
                    return;
                }
                candidateManager.Status = 3;
                repository.Update(candidateManager);
            }
            catch (Exception ex)
            {
                log.Error(string.Format("后备人员出库出错！后备ID为【{0}】", id), ex);
            }
        }
        #endregion

        #region Internal Methods

        #endregion

        #region Reports

        /// <summary>
        /// 获取二级经理后备队伍统计表
        /// </summary>
        /// <returns></returns>
        public DataTable GetCandidateManagerGradeTwoSum()
        {
            StringBuilder cmdText = new StringBuilder();
            try
            {
                cmdText.Append(@"with temp as (
                                select a.IsChief,a.CandidatePost,a.TargetCandidate,a.CandidateMaturity,
                                       b.PostGrade,b.CorpID,
                                       c.Name as CorpName 
                                from MM_CandidateManager a
                                inner join OM_Employee b on a.Code=b.Code
                                left join OM_Organization c on b.CorpID=c.ID
                                where (a.Status=1 or a.Status=2) and a.CandidateManagerGrade='二级经理'
                                )        
                                select OrgName as CorpName,
                                   isnull(sum(case when TargetCandidate is null then 0 else 1 end),0) as 'CandidateManagerSum', 
                                   ISNULL(sum(case when IsChief=1 then 1 else 0 end),0) as 'ChiefSum',
                                   isnull(sum(case when CandidatePost='管理二岗' and IsChief=1 then 1 else 0 end),0) as 'PostTwoSum' ,
                                   isnull(sum(case when CandidatePost='管理三岗' and IsChief=1 then 1 else 0 end),0) as 'PostThreeSum' ,
                                   ISNULL(sum(case when IsChief=0 then 1 else 0 end),0) as 'NotChiefSum',
                                   isnull(sum(case when CandidatePost='管理三岗' and IsChief=0 then 1 else 0 end),0) as 'NpostThreeSum' ,
                                   isnull(sum(case when CandidatePost='管理四岗' and IsChief=0 then 1 else 0 end),0) as 'NpostFourSum',
                                   ISNULL(sum(case when TargetCandidate='综合管理' then 1 else 0 end),0) as 'Integrated',
                                   ISNULL(sum(case when TargetCandidate='市场经营' then 1 else 0 end),0) as 'Market',
                                   ISNULL(sum(case when TargetCandidate='业务技术' then 1 else 0 end),0) as 'Business',
                                   ISNULL(sum(case when PostGrade='管理三岗' then 1 else 0 end),0) as 'PostThree',
                                   ISNULL(sum(case when PostGrade='管理四岗' then 1 else 0 end),0) as 'PostFour',
                                   ISNULL(sum(case when PostGrade='管理五岗' then 1 else 0 end),0) as 'PostFive',
                                   isnull(sum(case when PostGrade='管理三岗' then 0 when PostGrade='管理四岗' then 0 
                                   when PostGrade='管理五岗' then 0 when (PostGrade is null) and (TargetCandidate is null) then 0 
                                   else  1 end),0) as 'PostOther',
                                   ISNULL(sum(case when CandidateMaturity='成熟' then 1 else 0 end),0) as 'Mature',
                                   ISNULL(sum(case when CandidateMaturity='待培养' then 1 else 0 end),0) as 'Cultured'
                                   from (select Name as OrgName,Grade from OM_Organization where ParentID in 
                                   ('OR1500025055','OR1500025056','OR1500025057','OR1200000535')) as org
                                    left join temp on org.OrgName=temp.CorpName
                                    group by OrgName,Grade
                                    order by Grade desc");
                return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString());
            }
            catch (Exception ex)
            {
                log.Error("获取二级经理后备队伍统计表出错！", ex);
                return null;
            }
        }

        /// <summary>
        /// 获取三级经理后备队伍统计表
        /// </summary>
        /// <returns></returns>
        public DataTable GetCandidateManagerGradeThreeSum()
        {
            StringBuilder cmdText = new StringBuilder();
            try
            {
                cmdText.Append(@"with temp as (
                                select a.IsPresident,a.CandidatePost,a.TargetCandidate,a.CandidateMaturity,
                                       b.PostGrade,b.CorpID,
                                       c.Name as CorpName 
                                from MM_CandidateManager a
                                inner join OM_Employee b on a.Code=b.Code
                                left join OM_Organization c on b.CorpID=c.ID
                                where (a.Status=1 or a.Status=2) and a.IsChief=0 and a.CandidateManagerGrade='三级经理'
                                )
                                select OrgName as CorpName,
                                       isnull(sum(case when CandidatePost='管理三岗' then 1 else 0 end),0) as 'PostThreeSum' ,
                                       isnull(sum(case when CandidatePost='管理四岗' then 1 else 0 end),0) as 'PostFourSum' ,
                                       isnull(sum(case when CandidatePost='管理五岗' then 1 else 0 end),0) as 'PostFiveSum' ,
                                       isnull(sum(case when CandidatePost='管理六岗' then 1 else 0 end),0) as 'PostSixSum' ,
                                       isnull(sum(case when CandidatePost='管理三岗' and IsPresident=1  then 1 else 0 end),0) as 'PostThreePresident' ,
                                       isnull(sum(case when CandidatePost='管理四岗' and IsPresident=1 then 1 else 0 end),0) as 'PostFourPresident' ,
                                       isnull(sum(case when CandidatePost='管理五岗' and IsPresident=1 then 1 else 0 end),0) as 'PostFivePresident' ,
                                       ISNULL(sum(case when TargetCandidate='综合管理' then 1 else 0 end),0) as 'Integrated',
                                       ISNULL(sum(case when TargetCandidate='市场经营' then 1 else 0 end),0) as 'Market',
                                       ISNULL(sum(case when TargetCandidate='业务技术' then 1 else 0 end),0) as 'Business',
                                       ISNULL(sum(case when PostGrade='管理三岗' then 1 else 0 end),0) as 'PostThree',
                                       ISNULL(sum(case when PostGrade='管理四岗' then 1 else 0 end),0) as 'PostFour',
                                       ISNULL(sum(case when PostGrade='管理五岗' then 1 else 0 end),0) as 'PostFive',
                                       ISNULL(sum(case when PostGrade='管理六岗' then 1 else 0 end),0) as 'PostSix',
                                       ISNULL(sum(case when PostGrade='管理七岗' then 1 else 0 end),0) as 'PostSeven',
                                       isnull(sum(case when PostGrade='管理三岗' then 0 when PostGrade='管理四岗' then 0 
                                       when PostGrade='管理五岗' then 0 when PostGrade='管理六岗' then 0 when PostGrade='管理七岗' then 0
                                       when (PostGrade is null) and (TargetCandidate is null) then 0 else 1 end),0) as 'PostOther',
                                       ISNULL(sum(case when CandidateMaturity='成熟' then 1 else 0 end),0) as 'Mature',
                                       ISNULL(sum(case when CandidateMaturity='待培养' then 1 else 0 end),0) as 'Cultured'
                                       from (select Name as OrgName,Grade from OM_Organization where ParentID in 
                                       ('OR1500025055','OR1500025056','OR1500025057','OR1200000535')) as org
                                        left join temp on org.OrgName=temp.CorpName
                                        group by OrgName,Grade
                                        order by Grade desc");
                return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString());

            }
            catch (Exception ex)
            {
                log.Error("获取三级经理后备队伍统计表出错！", ex);
                return null;
            }
        }

        /// <summary>
        /// 学历结构
        /// </summary>
        /// <returns></returns>
        public DataTable GetEducationStructureReport(IDictionary<string, object> parameters)
        {
            StringBuilder cmdText = new StringBuilder();
            cmdText.Append(@"WITH TEMP
                                     AS (SELECT code,
                                                CASE
                                                  WHEN ( fulltimeeducation IS NULL
                                                          OR fulltimeeducation = '' ) THEN inserviceeducation
                                                  WHEN ( inserviceeducation IS NULL
                                                          OR inserviceeducation = '' ) THEN fulltimeeducation
                                                  ELSE inserviceeducation
                                                END AS education
                                         FROM   (SELECT DISTINCT a.code,
                                                                 c.fulltimeeducation,
                                                                 c.inserviceeducation
                                                 FROM   mm_candidatemanager a
                                                        INNER JOIN om_employee b
                                                          ON a.code = b.code
                                                        INNER JOIN om_diploma c
                                                          ON b.id = c.employeeid
                                                        INNER JOIN OM_Organization org on b.CorpID=org.ID
                                                 WHERE  ( a.status = 1
                                                           OR a.status = 2 )
                                                        AND NOT ( ( c.fulltimeeducation IS NULL
                                                                     OR c.fulltimeeducation = '' )
                                                                  AND ( c.inserviceeducation IS NULL
                                                                         OR c.inserviceeducation = '' ) )");
            if (parameters != null)
            {
                foreach (KeyValuePair<string, object> pair in parameters)
                {
                    cmdText.AppendFormat(" and {0}='{1}'", pair.Key, pair.Value);
                }
            }

            cmdText.Append(@") TEMP) SELECT education,
                                       SUM(1) AS num
                                FROM   TEMP
                                GROUP  BY education ");
            try
            {
                return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString());
            }
            catch (Exception ex)
            {
                log.Error("生成学历结构报表出错！", ex);
                return null;
            }
        }

        /// <summary>
        /// 年龄结构
        /// </summary>
        /// <returns></returns>
        public DataTable GetAgeStructureReport(IDictionary<string, object> parameters)
        {
            StringBuilder cmdText = new StringBuilder();
            cmdText.Append(@"WITH TEMP
                                     AS (SELECT DISTINCT a.code,
                                                         Datediff(YEAR, b.birthday, Getdate()) AS age
                                         FROM   mm_candidatemanager a
                                                INNER JOIN om_employee b
                                                  ON a.code = b.code
                                                 INNER JOIN OM_Organization org
                                                  on b.CorpID=org.ID
                                         WHERE  ( a.status = 1
                                                   OR a.status = 2 )");
            if (parameters != null)
            {
                foreach (KeyValuePair<string, object> pair in parameters)
                {
                    cmdText.AppendFormat(" and {0}='{1}'", pair.Key, pair.Value);
                }
            }

            cmdText.Append(@" )SELECT Isnull(SUM(CASE
                                                    WHEN age <= 25 THEN 1
                                                    ELSE 0
                                                  END), 0) AS '25岁以下',
                                       Isnull(SUM(CASE
                                                    WHEN age >= 26
                                                         AND age <= 30 THEN 1
                                                    ELSE 0
                                                  END), 0) AS '26-30岁',
                                       Isnull(SUM(CASE
                                                    WHEN age >= 31
                                                         AND age <= 35 THEN 1
                                                    ELSE 0
                                                  END), 0) AS '31-35岁',
                                       Isnull(SUM(CASE
                                                    WHEN age >= 36
                                                         AND age <= 40 THEN 1
                                                    ELSE 0
                                                  END), 0) AS '36-40岁',
                                       Isnull(SUM(CASE
                                                    WHEN age >= 41 THEN 1
                                                    ELSE 0
                                                  END), 0) AS '41岁以上'
                                FROM   TEMP ");
            try
            {
                return repository.ExecuteDataTable<CandidateManager>(cmdText.ToString());
            }
            catch (Exception ex)
            {
                log.Error("生成年龄结构报表出错！", ex);
                return null;
            }
        }

        #endregion
    }
}