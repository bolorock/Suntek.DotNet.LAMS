#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: AuthorizeCenter
 * Module:  RolePrivilege
 * Descrption:
 * CreateDate: 2010/11/18 13:55:37
 * Author: ljz
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;

using log4net;
using Microsoft.Practices.Unity;
using EAFrame.Core;
using EAFrame.Core.Enums;
using EAFrame.Core.Service;
using EAFrame.Core.Security;
using EAFrame.Core.Extensions;
using EAFrame.Core.Web;
using EAFrame.Core.Caching;
using EAFrame.Core.Utility;
using EAFrame.Core.FastInvoker;
using EAFrame.WebControls;
using SunTek.EAFrame.AuthorizeCenter.Domain;
using SunTek.EAFrame.AuthorizeCenter.Service;

using Newtonsoft.Json;

namespace WebSite
{

    public partial class SpecialPrivilegeDetail : BasePage
    {
        private RolePrivilegeService rolePrivilegeService = new RolePrivilegeService();
        private SpecialPrivilegeService specialPrivilegeService = new SpecialPrivilegeService();
        private ResourceService resourceService = new ResourceService();

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                string userID = Request.QueryString["UserID"];
                short authFlag = Request.QueryString["AuthFlag"].ToSafeString().ToShort(0);
                //初始化角色权限
                InitRolePrivilege(userID, authFlag);
            }
        }



        /// <summary>
        /// 初始化树
        /// </summary>
        private void InitRolePrivilege(string userID, short authFlag)
        {

            AjaxTree1.PostType = PostType.NoPost;
            AjaxTree1.IsAjaxLoad = false;
            AjaxTree1.ShowNodeIco = false;
            AjaxTree1.ShowCheckBox = true;
            AjaxTree1.SelectionMode = authFlag==2? SelectionMode.Multiple: SelectionMode.RelatedMultiple;
            AjaxTree1.Nodes.Clear();

           // Resource appResource = resourceService.All().FirstOrDefault(o => o.ID == ApplicationContext.AppID);
            SunTek.EAFrame.Infrastructure.Domain.SysParam sysParam = new SunTek.EAFrame.Infrastructure.Service.SysParamService().GetSysParam("AppID");
            string rootPriId = GetPidByResId(sysParam.ID);
            List<string> privilegeIDs = new OperatorService().GetAllPrivilegeIDs(userID);

            IDictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.SafeAdd("OperatorID", userID);
            parameters.SafeAdd("AuthFlag", authFlag);
            List<SpecialPrivilege> sPrivileges = new SpecialPrivilegeService().FindAll(parameters).ToList();
            List<string> sPrivilegeIDs = sPrivileges == null ? new List<string>() : sPrivileges.Select(o => o.PrivilegeID).ToList();

            AjaxTreeNode appNode = new AjaxTreeNode()
            {
                ID = rootPriId,
                Text = sysParam.Description,
                Value = rootPriId,
                Tag = "root",
                IcoSrc = string.Format("{0}Skins/{1}/Images/menu.gif", WebUtil.GetRootPath(), Skin),
                NodeState = NodeState.Open,
                Checked= sPrivilegeIDs.Contains(rootPriId),
                ShowCheckBox = !(authFlag == 1 && privilegeIDs.Contains(rootPriId))
                
            };
            AjaxTree1.Nodes.Add(appNode);

            List<Resource> resources = resourceService.All().Where(o => o.ParentID==sysParam.Value).OrderBy(o => o.SortOrder).ToList();

            resources = ResourcesFilter(resources, privilegeIDs, authFlag);
          
            foreach (Resource resource in resources)
            {
                string priId = GetPidByResId(resource.ID);
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = priId,
                    Text = resource.Text,
                    Value = resource.ID,
                    Tag = ResourceType.Page.ToString(),
                    NodeState = NodeState.Open,
                     Checked = sPrivilegeIDs.Contains(priId),
                    ShowCheckBox = !(authFlag == 1 && privilegeIDs.Contains(priId))
                };

                AddChildResource(node, privilegeIDs, sPrivilegeIDs, authFlag);
                appNode.ChildNodes.SafeAdd(node);
            }
        }

        /// <summary>
        /// 根据特殊权限的类型过滤相应的权限
        /// </summary>
        /// <param name="resources"></param>
        /// <param name="privilegeIDs"></param>
        /// <param name="authFlag"></param>
        /// <returns></returns>
        List<Resource> ResourcesFilter(List<Resource> resources, List<string> privilegeIDs, short authFlag)
        {
            //按类型过滤
            if (authFlag == 1) //开通
            {
                return resources;
            }
            else if (authFlag == 2)
            {
                return resources.Where(o => privilegeIDs.Contains(GetPidByResId(o.ID))).ToList();//只显示角色已经开通了的
            }
            return null;

        }

        void AddChildResource(AjaxTreeNode parentNode, List<string> privilegeIDs, List<string> sPrivilegeIDs, short authFlag)
        {
            List<Resource> resources = resourceService.All().Where(o => o.ParentID == parentNode.Value).OrderBy(o => o.SortOrder).ToList();
            resources = ResourcesFilter(resources, privilegeIDs, authFlag);

            foreach (var resource in resources)
            {
                string priId = GetPidByResId(resource.ID);
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = priId,
                    Text = resource.Text,
                    Value = resource.ID,
                    NodeState = NodeState.Close,
                    IcoSrc = string.Format("{0}Skins/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(resource.Type.Cast<ResourceType>(ResourceType.Menu))),
                    Checked = sPrivilegeIDs.Contains(priId),
                    ShowCheckBox = !(authFlag == 1 && privilegeIDs.Contains(priId))
                };

                BuildOperate(node, privilegeIDs, sPrivilegeIDs, authFlag);

                parentNode.ChildNodes.SafeAdd(node);
                AddChildResource(node, privilegeIDs, sPrivilegeIDs, authFlag);
            }
        }

        /// <summary>
        /// 绑定操作项（因为树用了级联，所以判断如果下边有操作项的时候，将模拟一个访问）
        /// </summary>
        /// <param name="parentNode">父节点</param>
        /// <param name="privilegeIDs">权限集合</param>
        void BuildOperate(AjaxTreeNode parentNode, List<string> privilegeIDs, List<string> sPrivilegeIDs, short authFlag)
        {
            List<Privilege> operates = new PrivilegeService().All().Where(p => p.ResourceID == parentNode.Value &&!string.IsNullOrWhiteSpace(p.OperateID)).ToList(); //取得资源相关的所有操作项id

            //按类型过滤
            if(authFlag == 2)
            {
                operates = operates.Where(o => privilegeIDs.Contains(o.ID)).ToList();//只显示角色已经开通了的
            }

         //   List<Operate> operates = new OperateService().All().Where(o => operateIDs.Contains(o.ID)).ToList(); //根据操作项id集合得到操作项集合

            //判断如果下边有操作项的时候，将模拟一个访问
            if (operates.Count > 0)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = "tempAccess",
                    Text = "访问",
                    Value = "tempAccess",
                    Tag = "Operate",
                    ShowCheckBox=parentNode.ShowCheckBox
                };
                parentNode.ChildNodes.SafeAdd(node);
            }

            foreach (var operate in operates)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = operate.ID,
                    Text = operate.Name,
                    Value = operate.ID,
                    Tag = "Operate",
                    Checked=sPrivilegeIDs.Contains(operate.ID),
                    ShowCheckBox = !(authFlag == 1 && privilegeIDs.Contains(operate.ID))
                };
                parentNode.ChildNodes.SafeAdd(node);
            }

        }


        /// <summary>
        /// 设置目录图标
        /// </summary>
        /// <param name="ResourceType"></param>
        /// <returns></returns>
        private string getResourceIcon(ResourceType ResourceType)
        {
            string icon = "menu.gif";

            switch (ResourceType)
            {
                case ResourceType.Button:
                    icon = "menu.gif";
                    break;
                case ResourceType.Menu:
                    icon = "menu.gif";
                    break;
                case ResourceType.Page:
                    icon = "menu.gif";
                    break;
            }

            return icon;
        }

        /// <summary>
        /// 创建目录树方法
        /// </summary>
        /// <param name="tn">目录树的节点</param>
        private void BuildTree(AjaxTreeNode tn)
        {
            List<Resource> resources = resourceService.All().Where(o => o.ParentID == tn.ID).OrderBy(o => o.SortOrder).ToList();

            foreach (var res in resources)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = res.ID,
                    Text = res.Text,
                    Value = res.ID,
                    Tag = res.Type.ToString(),
                    NodeIcoSrc = tn.NodeIcoSrc,
                    IcoSrc = string.Format("{0}Skins/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(res.Type.Cast<ResourceType>(ResourceType.Menu)))
                };

                tn.ChildNodes.Add(node);
                //递归获取目录树
                BuildTree(node);
            }
        }

        public string Save(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();
            try
            {
                IList<string> parameters = argument.Trim(',').Split(',').ToList();
               // IList<AjaxTreeNode> parameters = JsonConvert.DeserializeObject<IList<AjaxTreeNode>>(argument);
                string userID = Request.QueryString["UserID"];
                short authFlag = Request.QueryString["AuthFlag"].ToSafeString().ToShort(0);
                if(string.IsNullOrEmpty(userID))
                {
                    ajaxResult.ActionResult = ActionResult.Failed;
                    ajaxResult.PromptMsg = "用户对象为空！";
                    log.Error("用户对象为空");
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                if (string.IsNullOrEmpty(userID))
                {
                    ajaxResult.ActionResult = ActionResult.Failed;
                    ajaxResult.PromptMsg = "角色ID为空！";
                    log.Error("角色ID为空");
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                if (parameters == null || parameters.Count == 0)
                {
                    ajaxResult.PromptMsg = "您没有选择任何资源，请选择后再保存！";
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                IList<SpecialPrivilege> specialPrivileges = parameters.Where(o => o != "tempAccess").Select(p => new SpecialPrivilege()
                {
                    ID = IdGenerator.NewComb().ToSafeString(),
                    AuthFlag = authFlag,
                      Authorizer=User.ID,
                       AuthTime=DateTime.Now,
                        OperatorID=userID,
                         OwnerOrg=User.OrgPath,
                    PrivilegeID = p
                }).ToList();


                specialPrivilegeService.SaveSpecialPrivilege(specialPrivileges);

                ajaxResult.RetValue = string.Empty;
                ajaxResult.ActionResult = ActionResult.Success;
                ajaxResult.PromptMsg = "保存成功！";
                WebUtil.CloseWidow(false);
            }
            catch (Exception ex)
            {
                ajaxResult.ActionResult = ActionResult.Failed;
                ajaxResult.PromptMsg = "保存角色出错，请联系管理员！";
                log.Error(ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }


        string GetPidByResId(string resourceID)
        {
            return new PrivilegeService().GetPidByResId(resourceID); 
        }

       
        


    }
}
