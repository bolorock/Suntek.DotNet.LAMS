#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Assessment
 * Module:  ExamPaper
 * Descrption:
 * CreateDate: 2010/11/18 14:00:59
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Data;
using System.Collections.Generic;
using System.Linq;
using log4net;

using EAFrame.Core;
using EAFrame.Core.Caching;
using EAFrame.Core.Service;
using EAFrame.Core.Enums;
using EAFrame.Core.Data;
using EAFrame.Core.DataFilter;
using EAFrame.Core.Extensions;
using SunTek.Assessment.Domain;

namespace SunTek.Assessment.Service
{
    public class ExamPaperService : BaseService<string, ExamPaper>
    {
        #region Fields
        private readonly ILog log = LogManager.GetLogger(typeof(ExamPaperService));
        private MainSubjectService mainSubjectService = new MainSubjectService();
        private ExamPaperSubjectService examPaperSubjectService = new ExamPaperSubjectService();
        #endregion

        #region Constructors

        public ExamPaperService() { }
        #endregion

        #region IExamPaperService Imp

        /// <summary>
        /// 删除试卷
        /// </summary>
        /// <param name="entity">试卷实体</param>
        public void Delete(string examPaperID)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(ExamPaper)))
            {
                repository.ExecuteSql<ExamPaper>(string.Format("delete from LA_ExamPaperSubject where ExamPaperID='{0}' ", examPaperID));

                repository.ExecuteSql<ExamPaper>(string.Format("delete from LA_MainSubject where ExamPaperID='{0}' ", examPaperID));
                repository.ExecuteSql<ExamPaper>(string.Format("delete from LA_ExamPaper where ID='{0}' ", examPaperID));
                //ExamPaperSubjectService examPaperSubjectService = new ExamPaperSubjectService();
                //IList<ExamPaperSubject> examPaperSubjects = examPaperSubjectService.All().Where(p => p.ExamPaperID == entity.ID).ToList();

                //repository.Clear<ExamPaper>();

                //foreach (var p in examPaperSubjects)
                //{
                //    examPaperSubjectService.Delete(p);
                //}

                //    base.Delete(entity);

                trans.Commit();
            }

            ClearCache(typeof(ExamPaper));
            ClearCache(typeof(MainSubject));
            ClearCache(typeof(ExamPaperSubject));

        }

        /// <summary>
        /// 对象复制
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="obj"></param>
        /// <returns></returns>
        private T ModelCopy<T>(object obj) where T : class, new()
        {
            Type type = typeof(T);
            T t = new T();
            foreach (var p in type.GetProperties())//通过反射赋值
            {
                if (p.Name != "ID")
                {
                    p.SetValue(t, p.GetValue(obj, null), null);
                }
                else
                {
                    p.SetValue(t, IdGenerator.NewComb().ToString(), null);
                }
            }
            return t;
        }

        /// <summary>
        /// 复制问卷
        /// </summary>
        /// <param name="examPaperID"></param>
        public void Copy(string examPaperID)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(ExamPaper)))
            {
                //复制examPaper数据
                ExamPaper model = repository.GetDomain<ExamPaper>(examPaperID);
                ExamPaper examPaper =ModelCopy<ExamPaper>(model);
                examPaper.Title = examPaper.Title + "_副本";
                examPaper.CreateTime = DateTime.Now;
                repository.Save(examPaper);


                IDictionary<string, object> dic = new Dictionary<string, object>();
                dic.Add("ExamPaperID", model.ID);

                //复制MainSubject数据
                IList<MainSubject> mainSubjects = mainSubjectService.FindAll(dic);
                foreach (var obj in mainSubjects)
                {
                    dic.Clear();
                    dic.Add("MainSubjectID", obj.ID);

                    MainSubject mainSubject = ModelCopy<MainSubject>(obj);
                    mainSubject.ExamPaperID = examPaper.ID;
                    mainSubjectService.SaveOrUpdate(mainSubject);


                    //复制examPaperSubject数据
                    IList<ExamPaperSubject> examPaperSubjects = examPaperSubjectService.FindAll(dic);
                    foreach (var item in examPaperSubjects)
                    {
                        ExamPaperSubject examPaperSubject = ModelCopy<ExamPaperSubject>(item);
                        examPaperSubject.ExamPaperID = examPaper.ID;
                        examPaperSubject.MainSubjectID = mainSubject.ID;
                        examPaperSubjectService.SaveOrUpdate(examPaperSubject);
                    }
                }
                trans.Commit();
            }
        }


        /// <summary>
        /// 保存试卷
        /// </summary>
        /// <param name="entity">试卷实体</param>
        public override void SaveOrUpdate(ExamPaper entity)
        {
            using (ITransaction trans = UnitOfWork.BeginTransaction(typeof(ExamPaper)))
            {
                repository.Clear<ExamPaper>();
                repository.SaveOrUpdate(entity);


                if (entity.ExamMainSubjects != null)
                {
                    //删除大题与小题
                    repository.ExecuteSql<Subject>(string.Format("delete from LA_MainSubject where ExamPaperID='{0}' ", entity.ID));
                    repository.ExecuteSql<Subject>(string.Format("delete from LA_ExamPaperSubject where ExamPaperID='{0}' ", entity.ID));

                    ExamPaperSubjectService examPaperSubjectService = new ExamPaperSubjectService();
                    MainSubjectService mainSubjectService = new MainSubjectService();

                    foreach (var mainItem in entity.ExamMainSubjects)
                    {
                        mainItem.ID = IdGenerator.NewComb().ToString();
                        mainItem.ExamPaperID = entity.ID;
                        //MainSubject mainSubject = new MainSubject()
                        //{
                        //    ID = IdGenerator.NewComb().ToString(),
                        //    ExamPaperID = entity.ID

                        //};
                        mainSubjectService.SaveOrUpdate(mainItem);

                        if (mainItem.ExamPaperSubjects != null)
                        {
                            foreach (var item in mainItem.ExamPaperSubjects)
                            {
                                item.ID = IdGenerator.NewComb().ToString();
                                item.ExamPaperID = entity.ID;
                                item.MainSubjectID = mainItem.ID;
                                examPaperSubjectService.SaveOrUpdate(item);

                                //ExamPaperSubject examPaperSubject = new ExamPaperSubject()
                                //{
                                //    ID = IdGenerator.NewComb().ToString(),
                                //    ExamPaperID = entity.ID,
                                //    MainSubjectID = mainSubject.ID,
                                //    SortOrder = item.SortOrder,
                                //    SubjectID = item.SubjectID,

                                //     SubjectScore=item.SubjectScore
                                //};
                                //examPaperSubjectService.SaveOrUpdate(examPaperSubject);


                            }
                        }
                    }






                }

                trans.Commit();
            }

            ClearCache(typeof(ExamPaper));
            if (entity.ExamPaperSubjects != null && entity.ExamPaperSubjects.Count > 0)
            {
                ClearCache(typeof(ExamPaperSubject));
            }
        }



        /// <summary>
        /// 获取问卷相关的题目
        /// </summary>
        /// <param name="userID">问卷ID</param>
        /// <returns></returns>
        public List<string> GetDataSubjects(string examId)
        {
            if (string.IsNullOrWhiteSpace(examId)) return new List<string>();
            DataTable dt = repository.ExecuteDataTable<ExamPaper>(string.Format(@"select SubjectID  from LA_ExamPaperSubject where ExamPaperID='{0}' order by SortOrder", examId)) ?? new DataTable();
            return dt.AsEnumerable().Select(dr => dr["SubjectID"].ToSafeString()).ToList();
        }

        /// <summary>
        /// 获取问卷相关的题目
        /// </summary>
        /// <param name="userID">问卷ID</param>
        /// <returns></returns>
        public List<Subject> GetSubjectByExamPaper(string examId)
        {
            if (string.IsNullOrWhiteSpace(examId)) return new List<Subject>();
            DataTable dt = repository.ExecuteDataTable<ExamPaper>(string.Format(@"select t2.[ID],t2.[SubjectTitle],t2.[SubjectType],t2.[Category],t2.[Answer],t1.SubjectScore as [DefaultScore],t2.[OwnerOrg],t2.[Creator],t2.[CreateTime],t2.[ParentID],t2.[SortOrder],t1.MainSubjectID from LA_ExamPaperSubject t1
join LA_Subject t2 on t1.SubjectID=t2.ID
 where ExamPaperID='{0}' order by 
SortOrder asc", examId)) ?? new DataTable();
            return dt.ToList<Subject>();
        }

        #endregion

        #region Internal Methods

        #endregion
    }
}