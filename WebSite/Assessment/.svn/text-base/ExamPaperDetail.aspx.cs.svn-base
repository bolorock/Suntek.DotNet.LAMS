#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Assessment
 * Module:  ExamPaper
 * Descrption:
 * CreateDate: 2010/11/18 14:01:00
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;

using log4net;
using Newtonsoft.Json;
using Microsoft.Practices.Unity;
using EAFrame.Core;
using EAFrame.Core.Enums;
using EAFrame.Core.Service;
using EAFrame.Core.Security;
using EAFrame.Core.Extensions;
using EAFrame.Core.Web;
using EAFrame.Core.Caching;
using EAFrame.Core.Utility;
using EAFrame.Core.FastInvoker;
using EAFrame.WebControls;
using SunTek.EAFrame.AuthorizeCenter.Domain;
using SunTek.EAFrame.AuthorizeCenter.Service;
using SunTek.Assessment.Domain;
using SunTek.Assessment.Service;
using EAFrame.Core.Data;
namespace WebSite
{
    public partial class ExamPaperDetail : BasePage
    {
        public int index = 0;
        private ExamPaperService examPaperService = new ExamPaperService();
        private SubjectService subjectService = new SubjectService();
        private List<string> subjectIDs = new List<string>();
        private List<Subject> _subjects;
        #region ---界面处理方法---

        protected bool ShowPageDetail()
        {

            cboCategory.IsSingle = true;
            cboCategory.BindCombox(SubjectCategory.FullTest);

            //cboCat.IsSingle = true;
            //cboCat.BindCombox(SubjectCategory.FullTest);


            subjectIDs = examPaperService.GetDataSubjects(CurrentId);


            //PageInfo pageInfo = new PageInfo() { PageSize = 10, PageIndex = 1 };
            //IDictionary<string, object> para = new Dictionary<string, object>();
            //para.SafeAdd("ParentID", new EAFrame.Core.Data.Condition("(ParentID is null or ParentID='')"));
            //IPageOfList<Subject> result = subjectService.FindAll(para, pageInfo);
            //subjectCount.InnerText = result.PageInfo.ItemCount.ToSafeString();
            //subjectPageCount.InnerText = result.PageInfo.PageCount.ToSafeString();
            //rptSubject.DataSource = result;//.Where(p => !subjectIDs.Contains(p.ID)).ToList();
            //rptSubject.DataBind();

            ExamPaper entity = examPaperService.GetDomain(CurrentId);

            if (entity == null) return false;


            IDictionary<string, object> para = new Dictionary<string, object>();
            para.SafeAdd("ExamPaperID", CurrentId);
            para.SafeAdd("Status", new Condition(" Status>0"));
            IList<Survey> result = new SurveyService().FindAll(para);
            if (result != null && result.Count > 0)
            {
              litTips.Text = "已发布关联该问卷的测评活动，禁止对问卷进行修改！";
              litTips.Visible = true;
            }


            //rptSelectedSubject.DataSource = new ExamPaperService().GetSubjectByExamPaper(CurrentId);
            //rptSelectedSubject.DataBind();

            SetControlValues(entity);
            _subjects = examPaperService.GetSubjectByExamPaper(CurrentId);

            para.Clear();
            para.SafeAdd("ExamPaperID", CurrentId);
                IList < MainSubject > mainSubjects = new MainSubjectService().FindAll(para).OrderBy(o=>o.SortOrder).ToList<MainSubject>();
                rptMainSubject.DataSource = mainSubjects;
                rptMainSubject.DataBind();

            return true;
        }


        //public List<Subject> GetSubjectByMain(string mainSubjectID)
        //{
        //    return _subjects.Where(o=>o.m

        //}


        public List<Subject> GetSubjectByMain(string mainId)
        {
            return new ExamPaperSubjectService().GetSubjectByMain(mainId);
        }


        public bool IsSelected(string id)
        {
            return subjectIDs.Contains(id);
        }




        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack && !IsAjaxPost)
            {
                ShowPageDetail();
            }
        }
        #endregion

        #region ---操作处理方法---
        protected ExamPaper GetDomainObject()
        {
            ExamPaper examPaper = examPaperService.GetDomain(CurrentId);

            if (examPaper == null)
            {
                examPaper = new ExamPaper();
                examPaper.ID = CurrentId;
            }

            GetControlValues(ref examPaper);

            return examPaper;
        }


        public string PageChange(string pageIndex)
        {
            AjaxResult ajaxResult = new AjaxResult();

            string errorMsg = string.Empty;
            ActionResult actionResult = ActionResult.Failed;
            string actionMessage = string.Empty;
            try
            {
               
                PageInfo pageInfo = new PageInfo() { PageIndex = pageIndex.Cast<int>(1), PageSize = 10 };
                IDictionary<string, object> para = new Dictionary<string, object>();
                para.SafeAdd("ParentID", new EAFrame.Core.Data.Condition("(ParentID is null or ParentID='')"));
                var subjects = subjectService.FindAll(para, pageInfo).Select(o => new { SubjectType = o.SubjectType.ToSafeString().Cast<SubjectType>(SubjectType.TextBox).GetRemark(), SubjectTitle = o.SubjectTitle, DefaultScore = o.DefaultScore, ID = o.ID, Category = o.Category.ToSafeString().Cast<SubjectCategory>(SubjectCategory.FullTest).GetRemark() }).ToList();

                actionResult = ActionResult.Success;

                //获取提示信息
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);

                //记录操作日志
                // AddActionLog("PageChange", PageContext.Action, actionResult, actionMessage);

                ajaxResult.ActionResult = actionResult;
                ajaxResult.RetValue = subjects;
                ajaxResult.PromptMsg = actionMessage;
            }
            catch (Exception ex)
            {
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);
                log.Error(actionMessage, ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }

        public string Save(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();

            string errorMsg = string.Empty;
            ActionResult actionResult = ActionResult.Failed;
            string actionMessage = string.Empty;
            try
            {
                ExamPaper examPaper = JsonConvert.DeserializeObject<ExamPaper>(argument);
                examPaper.ID = string.IsNullOrEmpty(CurrentId) ? CurrentId = IdGenerator.NewComb().ToString() : CurrentId;

                //检查一下，如果该试卷已经有被关联到某个测评活动，并且这个测评活动已经发布了，那么则提示错误
                IDictionary<string, object> para = new Dictionary<string, object>();
                para.SafeAdd("ExamPaperID", examPaper.ID);
                para.SafeAdd("Status", new Condition(" Status>0"));
                IList<Survey> result =new SurveyService().FindAll(para);
                if (result != null && result.Count > 0)
                {
                  
                    ajaxResult.ActionResult = actionResult;
                    ajaxResult.RetValue = examPaper.ID;
                    ajaxResult.PromptMsg = "已发布关联该问卷的测评活动，禁止对问卷进行修改！";
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                string subjectIDStr = Request.Form["SubjectIDs"].ToSafeString();
                //    IList<string> subjectIDs = subjectIDStr.Trim(',').Split(',').ToList();

                examPaperService.SaveOrUpdate(examPaper);
                actionResult = ActionResult.Success;

                //获取提示信息
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);

                //记录操作日志
                AddActionLog(examPaper, PageContext.Action, actionResult, actionMessage);

                ajaxResult.ActionResult = actionResult;
                ajaxResult.RetValue = examPaper.ID;
                ajaxResult.PromptMsg = actionMessage;
            }
            catch (Exception ex)
            {
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);
                log.Error(actionMessage, ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }

        #endregion
    }
}
