#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: AuthorizeCenter
 * Module:  MetaData
 * Descrption:
 * CreateDate: 2010/11/18 13:55:37
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;

using log4net;
using Microsoft.Practices.Unity;
using EAFrame.Core;
using EAFrame.Core.Enums;
using EAFrame.Core.Service;
using EAFrame.Core.Security;
using EAFrame.Core.Extensions;
using EAFrame.Core.Web;
using EAFrame.Core.Caching;
using EAFrame.Core.Utility;
using EAFrame.Core.FastInvoker;
using EAFrame.WebControls;
using SunTek.EAFrame.AuthorizeCenter.Domain;
using SunTek.EAFrame.Infrastructure.Domain;
using SunTek.EAFrame.Infrastructure.Service;
using SunTek.EAFrame.AuthorizeCenter.Service;

using Newtonsoft.Json;

namespace WebSite
{
    public partial class MetaDataManager : BasePage
    {
        private RolePrivilegeService rolePrivilegeService = new RolePrivilegeService();
        private ResourceService resourceService = new ResourceService();
        OrganizationService sOrg = new OrganizationService();

        protected void Page_Load(object sender, EventArgs e)
        {
            string roleID = Request.QueryString["RoleID"];
            InitTree(roleID);
        }

        /// <summary>
        /// 初始化树
        /// </summary>
        private void InitTree(string roleID)
        {
            AjaxTree1.PostType = PostType.NoPost;
            AjaxTree1.SelectionMode = SelectionMode.Multiple;
            AjaxTree1.ShowNodeIco = true;
            AjaxTree1.ShowCheckBox = true;
            AjaxTree1.IsAjaxLoad = false;
            AjaxTree1.Nodes.Clear();


            List<Organization> orgs = sOrg.All().Where(o => o.ParentID == "-1").OrderBy(o => o.SortOrder).ToList();


            IDictionary<string, object> parameters = new Dictionary<string, object>();
            //parameters.SafeAdd("RoleID", roleID);
            //IList<RolePrivilege> rolePrivileges = rolePrivilegeService.FindAll(parameters);
            //List<string> privileges = rolePrivileges != null ? rolePrivileges.Select(o => o.PrivilegeID).ToList() : new List<string>();
            //List<string> metaIDs = new PrivilegeService().FindAll(null).Where(o => privileges.Contains(o.ID) && !string.IsNullOrEmpty(o.MetaDataID)).Select(o => o.MetaDataID).ToList();
            //List<string> orgIDs = new MetaDataService().FindAll(null).Where(o => metaIDs.Contains(o.ID)).Select(o => o.Value).ToList();

            List<string> orgIDs = GetSelectedOrgs(roleID);

            //取得当前的角色的数据权限
            List<string> dataPriveleges = new OperatorService().GetDataPriveleges(User.ID);

            //获取数据权限树加载深度
            int maxDepth = new SysParamService().GetSysParamValue<int>("DataPrivilegeTreeLoadDepth");
            foreach (var org in orgs)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = org.ID,
                    Text = org.Name,
                    Value =org.ID,
                    Tag = org.Type.ToString(),
                    IcoSrc = string.Format("{0}Skins/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(org.Type.Cast<ResourceType>(ResourceType.Menu))),
                    ShowCheckBox = (User.UserType == (short)UserType.Administrator || dataPriveleges.Exists(s => org.ID.EqualIgnoreCase(s))),

                    Checked = orgIDs.Exists(o => o.EndsWith(org.ID)),
                    NodeState = NodeState.Open
                };
                BuildTree(node, orgIDs, maxDepth, 1, dataPriveleges);
                AjaxTree1.Nodes.Add(node);
            }
        }


        private List<string> GetSelectedOrgs(string roleID)
        {
            IDictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.SafeAdd("RoleID", roleID);
            IList<RolePrivilege> rolePrivileges = rolePrivilegeService.FindAll(parameters);
            List<string> privileges = rolePrivileges != null ? rolePrivileges.Select(o => o.PrivilegeID).ToList() : new List<string>();
            List<string> metaIDs = new PrivilegeService().FindAll(null).Where(o => privileges.Contains(o.ID) && !string.IsNullOrEmpty(o.MetaDataID)).Select(o => o.MetaDataID).ToList();
            List<string> orgIDs = new MetaDataService().FindAll(null).Where(o => metaIDs.Contains(o.ID)).Select(o => o.Value).ToList();

            return orgIDs;
        }


        /// <summary>
        /// 创建目录树方法
        /// </summary>
        /// <param name="tn">目录树的节点</param>
        private void BuildTree(AjaxTreeNode tn, List<string> orgIDs, int maxDepth, int currentDepth, List<string> dataPriveleges)
        {
            if (maxDepth <= currentDepth) return;

            List<Organization> organizations = sOrg.All().Where(o => o.ParentID == tn.ID && (User.UserType == (short)UserType.Administrator || dataPriveleges.Exists(s => sOrg.GetOrgPath(o.ID).StartsWith(s) || s.StartsWith(sOrg.GetOrgPath(o.ID))))).OrderBy(o => o.SortOrder).ToList();

          //  List<Organization> organizations = sOrg.All().Where(o => o.ParentID == tn.ID).OrderBy(o => o.SortOrder).ToList();

            foreach (var org in organizations)
            {
                string orgPath=sOrg.GetOrgPath(org.ID);
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = org.ID,
                    Text = org.Name,
                    Value = org.ID,
                    Tag = org.Type.ToString(),

                    NodeIcoSrc = tn.NodeIcoSrc,
                    LinkUrl = string.Format("{0}AuthorizeCenter/OrgUserList.aspx?orgid={1}", WebUtil.GetRootPath(), org.ID),
                    Target = "_blank",
                    IcoSrc = string.Format("{0}Skins/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(org.Type.Cast<ResourceType>(ResourceType.Menu))),
                    Checked = orgIDs.Exists(o => o.EndsWith(org.ID)),

                    ShowCheckBox = (User.UserType == (short)UserType.Administrator || tn.ShowCheckBox==true || dataPriveleges.Exists(s => orgPath.EqualIgnoreCase(s)))

                };

                tn.ChildNodes.Add(node);

                BuildTree(node, orgIDs, maxDepth, currentDepth + 1, dataPriveleges);
            }
        }


        /// <summary>
        /// 设置目录图标
        /// </summary>
        /// <param name="ResourceType"></param>
        /// <returns></returns>
        private string getResourceIcon(ResourceType ResourceType)
        {
            string icon = "orgtree.gif";

            switch (ResourceType)
            {
                case ResourceType.Button:
                    icon = "orgtree.gif";
                    break;
                case ResourceType.Menu:
                    icon = "orgtree.gif";
                    break;
                case ResourceType.Page:
                    icon = "orgtree.gif";
                    break;
            }

            return icon;
        }


        public string Save(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();
            try
            {
                IList<AjaxTreeNode> parameters = JsonConvert.DeserializeObject<IList<AjaxTreeNode>>(argument);

                string roleID = Request.QueryString["RoleID"];

                if (string.IsNullOrEmpty(roleID))
                {
                    ajaxResult.ActionResult = ActionResult.Failed;
                    ajaxResult.PromptMsg = "角色ID为空！";
                    log.Error("角色ID为空");
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                //if (parameters == null || parameters.Count == 0)
                //{
                //    ajaxResult.PromptMsg = "您没有选择任何单位部门，请选择后再保存！";
                //    return JsonConvert.SerializeObject(ajaxResult);
                //}

                if (parameters.Count>0)
                {
                    IList<MetaData> metaData = parameters.Select(p => new MetaData()
                    {
                        ID = IdGenerator.NewComb().ToSafeString(),
                        Name = p.Text,
                        Value = sOrg.GetOrgPath(p.Value),
                        Creator = User.ID,
                        CreateTime = DateTime.Now,
                        OwnerOrg = User.OrgPath
                    }).ToList();

                    IList<Privilege> privilege = metaData.Select(p => new Privilege()
                    {
                        ID = IdGenerator.NewComb().ToSafeString(),
                        Name = p.Name,
                        MetaDataID = p.ID,
                        Creator = User.ID,
                        CreateTime = DateTime.Now,
                        Type = (int)ResourceType.BizData,
                        OwnerOrg = User.OrgPath
                    }).ToList();

                    IList<RolePrivilege> rolePrivilege = privilege.Select(p => new RolePrivilege()
                    {
                        ID = IdGenerator.NewComb().ToSafeString(),
                        RoleID = roleID,
                        PrivilegeID = p.ID
                    }).ToList();

                    rolePrivilegeService.SaveRoleOperatePrivilege(metaData, privilege, rolePrivilege);
                }

                ajaxResult.RetValue = string.Empty;
                ajaxResult.ActionResult = ActionResult.Success;
                ajaxResult.PromptMsg = "保存成功！";
                WebUtil.CloseWidow(false);
            }
            catch (Exception ex)
            {
                ajaxResult.ActionResult = ActionResult.Failed;
                ajaxResult.PromptMsg = "保存角色出错，请联系管理员！";
                log.Error(ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }
    }
}
