#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: AuthorizeCenter
 * Module:  RolePrivilege
 * Descrption:
 * CreateDate: 2010/11/18 13:55:37
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;

using log4net;
using Microsoft.Practices.Unity;
using EAFrame.Core;
using EAFrame.Core.Enums;
using EAFrame.Core.Service;
using EAFrame.Core.Security;
using EAFrame.Core.Extensions;
using EAFrame.Core.Web;
using EAFrame.Core.Caching;
using EAFrame.Core.Utility;
using EAFrame.Core.FastInvoker;
using EAFrame.WebControls;
using SunTek.EAFrame.AuthorizeCenter.Domain;
using SunTek.EAFrame.AuthorizeCenter.Service;

using Newtonsoft.Json;

namespace WebSite
{
    public partial class RolePrivilegeDetail : BasePage
    {
        private RolePrivilegeService rolePrivilegeService = new RolePrivilegeService();
        private ResourceService resourceService = new ResourceService();

        protected void Page_Load(object sender, EventArgs e)
        {

            string roleID = Request.QueryString["RoleID"];
            //初始化角色权限
            InitRolePrivilege(roleID);
        }



        /// <summary>
        /// 初始化树
        /// </summary>
        private void InitRolePrivilege(string roleID)
        {
            AjaxTree1.PostType = PostType.NoPost;
            AjaxTree1.IsAjaxLoad = false;
            AjaxTree1.ShowNodeIco = true;
            AjaxTree1.ShowCheckBox = true;
            AjaxTree1.Nodes.Clear();

            Resource appResource = resourceService.All().FirstOrDefault(o => o.ID == AppID);

            AjaxTreeNode appNode = new AjaxTreeNode()
            {
                ID = appResource.ID,
                Text = appResource.Text,
                Value = appResource.Type.ToString(),
                Tag = "root",
                IcoSrc = string.Format("{0}Skins/{1}/Images/analyzer.gif", WebUtil.GetRootPath(), Skin),
                NodeState = NodeState.Open
            };
            AjaxTree1.Nodes.Add(appNode);

            List<Resource> resources = resourceService.All().Where(o => o.ParentID == appNode.ID).OrderBy(o => o.SortOrder).ToList();

            IDictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.SafeAdd("RoleID", roleID);
            IList<RolePrivilege> rolePrivileges = rolePrivilegeService.FindAll(parameters);
            List<string> privileges = rolePrivileges != null ? rolePrivileges.Select(o => o.PrivilegeID).ToList() : new List<string>();


            foreach (Resource resource in resources)
            {
                string priId = GetPidByResId(resource.ID);
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = resource.ID,
                    Text = resource.Text,
                    Value = priId,
                    Tag = ResourceType.Page.ToString(),
                    NodeState = NodeState.Open,
                    Checked = privileges.Contains(priId)
                };

                AddChildResource(node, privileges);
                appNode.ChildNodes.SafeAdd(node);
            }
        }

        void AddChildResource(AjaxTreeNode parentNode, List<string> privileges)
        {
            List<Resource> resources = resourceService.All().Where(o => o.ParentID == parentNode.ID).OrderBy(o => o.SortOrder).ToList();
            foreach (var resource in resources)
            {
                string priId = GetPidByResId(resource.ID);
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = resource.ID,
                    Text = resource.Text,
                    Value = priId,
                    NodeState = NodeState.Close,
                    IcoSrc = string.Format("{0}Skins/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(resource.Type.Cast<ResourceType>(ResourceType.Menu))),
                    Checked = privileges.Contains(priId)
                };

                BuildOperate(node, privileges);

                parentNode.ChildNodes.SafeAdd(node);
                AddChildResource(node, privileges);
            }
        }

        /// <summary>
        /// 绑定操作项（因为树用了级联，所以判断如果下边有操作项的时候，将模拟一个访问）
        /// </summary>
        /// <param name="parentNode">父节点</param>
        /// <param name="privileges">权限集合</param>
        void BuildOperate(AjaxTreeNode parentNode, List<string> privileges)
        {
            List<string> operateIDs = new PrivilegeService().All().Where(p => p.ResourceID == parentNode.ID).Select(p => p.OperateID).ToList(); //取得资源相关的所有操作项id
            List<Operate> operates = new OperateService().All().Where(o => operateIDs.Contains(o.ID)).ToList(); //根据操作项id集合得到操作项集合

            //判断如果下边有操作项的时候，将模拟一个访问
            if (operates.Count > 0)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = "tempAccess",
                    Text = "访问",
                    Value = "tempAccess",
                    Tag = "Operate",
                    Checked = parentNode.Checked
                };
                parentNode.ChildNodes.SafeAdd(node);
            }

            foreach (var operate in operates)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = operate.ID,
                    Text = operate.OperateName,
                    Value = operate.ID,
                    Tag = "Operate",
                    Checked = privileges.Contains(operate.ID)
                };
                parentNode.ChildNodes.SafeAdd(node);
            }

        }


        /// <summary>
        /// 设置目录图标
        /// </summary>
        /// <param name="ResourceType"></param>
        /// <returns></returns>
        private string getResourceIcon(ResourceType ResourceType)
        {
            string icon = "pagefolder.png";

            switch (ResourceType)
            {
                case ResourceType.Button:
                    icon = "pubfolder.gif";
                    break;
                case ResourceType.Menu:
                    icon = "pagefolder.png";
                    break;
                case ResourceType.Page:
                    icon = "page.png";
                    break;
            }

            return icon;
        }

        /// <summary>
        /// 创建目录树方法
        /// </summary>
        /// <param name="tn">目录树的节点</param>
        private void BuildTree(AjaxTreeNode tn)
        {
            List<Resource> resources = resourceService.All().Where(o => o.ParentID == tn.ID).OrderBy(o => o.SortOrder).ToList();

            foreach (var res in resources)
            {
                AjaxTreeNode node = new AjaxTreeNode()
                {
                    ID = res.ID,
                    Text = res.Text,
                    Value = res.ID,
                    Tag = res.Type.ToString(),
                    NodeIcoSrc = tn.NodeIcoSrc,
                    IcoSrc = string.Format("{0}Skins/{1}/Images/{2}", WebUtil.GetRootPath(), Skin, getResourceIcon(res.Type.Cast<ResourceType>(ResourceType.Menu)))
                };

                tn.ChildNodes.Add(node);
                //递归获取目录树
                BuildTree(node);
            }
        }

        public string Save(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();
            try
            {
                IList<AjaxTreeNode> parameters = JsonConvert.DeserializeObject<IList<AjaxTreeNode>>(argument);

                string roleID = Request.QueryString["RoleID"];

                if (string.IsNullOrEmpty(roleID))
                {
                    ajaxResult.ActionResult = ActionResult.Failed;
                    ajaxResult.PromptMsg = "角色ID为空！";
                    log.Error("角色ID为空");
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                if (parameters == null || parameters.Count == 0)
                {
                    ajaxResult.PromptMsg = "您没有选择任何资源，请选择后再保存！";
                    return JsonConvert.SerializeObject(ajaxResult);
                }

                IList<RolePrivilege> rolePrivileges = parameters.Where(o => o.ID != "tempAccess").Select(p => new RolePrivilege()
                {
                    ID = IdGenerator.NewComb().ToSafeString(),
                    RoleID = roleID,
                    PrivilegeID = p.Value
                }).ToList();

                // IList<RolePrivilege> rolePrivileges =new List<RolePrivilege>();
                //foreach (AjaxTreeNode p in parameters)
                //{
                //    if (p.ID != "tempAccess")
                //    {
                //        RolePrivilege rolePrivilege = new RolePrivilege();
                //        rolePrivilege.RoleID = roleID;
                //        rolePrivilege.ID = IdGenerator.NewComb().ToSafeString();
                //        if (p.Tag == "Operate")
                //        {
                //            rolePrivilege.PrivilegeID = p.ID;
                //        }
                //        else
                //        {
                //            IDictionary<string, object> para = new Dictionary<string, object>();
                //            para.Add("ResourceID", p.ID);
                //            para.Add("Type", (int)ResourceType.Page);
                //            Privilege privilege = privilegeService.FindOne(para);
                //            if (privilege != null)
                //            {
                //                rolePrivilege.PrivilegeID = privilege.ID;
                //            }
                //            else
                //            {
                //                continue;
                //            }

                //        }
                //        rolePrivileges.Add(rolePrivilege);
                //    }
                //}

                rolePrivilegeService.SaveRolePrivilege(rolePrivileges);

                ajaxResult.RetValue = string.Empty;
                ajaxResult.ActionResult = ActionResult.Success;
                ajaxResult.PromptMsg = "保存成功！";
                WebUtil.CloseWidow(false);
            }
            catch (Exception ex)
            {
                ajaxResult.ActionResult = ActionResult.Failed;
                ajaxResult.PromptMsg = "保存角色出错，请联系管理员！";
                log.Error(ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }


        string GetPidByResId(string resourceID)
        {

            IDictionary<string, object> para = new Dictionary<string, object>();
            para.Add("ResourceID", resourceID);
            para.Add("Type", (int)ResourceType.Menu);
            Privilege privilege = new PrivilegeService().FindOne(para);
            if (privilege != null)
            {
                return privilege.ID;
            }
            else
            {
                return "";
            }
        }
    }
}
