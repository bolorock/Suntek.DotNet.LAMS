#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Assessment
 * Module:  SurveyResult
 * Descrption:
 * CreateDate: 2010/11/18 14:01:00
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;
using System.Data;
using System.Collections;
using System.Text;

using Microsoft.Practices.Unity;
using log4net;
using EAFrame.Core;
using EAFrame.Core.Enums;
using EAFrame.Core.Service;
using EAFrame.Core.Security;
using EAFrame.Core.Utility;
using EAFrame.Core.Extensions;
using EAFrame.Core.Web;
using EAFrame.Core.Caching;
using EAFrame.Core.FastInvoker;
using EAFrame.Core.DataFilter;
using EAFrame.WebControls;
using SunTek.Assessment.Domain;
using SunTek.Assessment.Service;
using SunTek.EAFrame.AuthorizeCenter.Domain;
using SunTek.EAFrame.AuthorizeCenter.Service;


namespace WebSite
{
    public partial class SurveyResultManager : BasePage
    {
        private SurveyResultService surveyResultService = new SurveyResultService();

        #region ---界面处理方法---



        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                ShowList();
               
            }
        }

        #endregion

        #region ---操作处理方法---


        /// <summary>
        /// 显示列表信息
        /// </summary>
        /// <param name="gvList">GridView对象</param>
        /// <param name="pageInfo">分页信息</param>
        public void ShowList()
        {
            litTable.Text = GetTableHtml(CurrentId);
        }


        public string GetTableHtml(string surveyID)
        {
            StringBuilder html = new StringBuilder();
            StringBuilder headHtml = new StringBuilder();
            StringBuilder ctnHtml = new StringBuilder();

            IDictionary<string, object> para = new Dictionary<string, object>();



            if (!string.IsNullOrWhiteSpace(surveyID))
            {
                para.SafeAdd("ParentID", surveyID);
                IList<Survey> surveys = new SurveyService().FindAll(para);
                if (surveys.Count > 0)
                {
                    foreach (Survey survey in surveys)
                    {
                        headHtml = new StringBuilder();
                        ctnHtml = new StringBuilder();
                        //Survey survey = new SurveyService().GetDomain(CurrentId);

                        if (!string.IsNullOrEmpty(survey.SurveyTarget))
                        {
                            Employee e = new EmployeeService().GetDomain(survey.SurveyTarget);
                            if (e != null)
                                html.AppendFormat("<div class='target'>测评对象：{0}</div>", e.Name);
                        }



                        html.Append("<table cellspacing=\"0\" border=\"1\" style=\"width:100%;border-collapse:collapse;\">");
                        para.Clear();

                        para.SafeAdd("SurveyID", survey.ID);
                        IList<SurveyResult> surveyResults = surveyResultService.FindAll(para).ToList();
                        para.Clear();
                        para.SafeAdd("AssessmentResultID", new EAFrame.Core.Data.Condition(string.Format("(AssessmentResultID in (select ID from LA_SurveyResult where SurveyID='{0}'))", survey.ID)));
                        IList<AnswerRecord> answerRecords = new AnswerRecordService().FindAll(para).ToList();

                        if (answerRecords.Count == 0)
                        {
                            //WebUtil.PromptMsg("该问卷还没有任何评估人进行打分或还未添加任何评估人！");

                            //return;
                            continue;
                        }

                        List<Subject> subjects = new ExamPaperService().GetSubjectByExamPaper(survey.ExamPaperID);  //获取问卷题目

                        if (subjects != null && subjects.Count > 0)
                        {

                            //制作表头
                            headHtml.AppendFormat("<tr class='th'><td rowspan=2 width='90'>员工编号</td><td rowspan=2  width='90'>姓名</td>");

                            StringBuilder subHeadHtml = new StringBuilder("");
                            for (int i = 1; i <= subjects.Count; i++)
                            {
                                //读取子题
                                IDictionary<string, object> parameter = new Dictionary<string, object>();

                                parameter.Add("ParentID", subjects[i - 1].ID);
                                List<Subject> subSubjects = new SubjectService().FindAll(parameter).ToList();
                                if (subSubjects.Count > 0)
                                {
                                    headHtml.AppendFormat("<td colspan='{0}'>{1}</td>", subSubjects.Count, i);

                                    foreach (Subject subSubject in subSubjects)
                                    {
                                        subHeadHtml.AppendFormat("<td>{0}</td>", subSubject.SortOrder);
                                    }
                                }
                                else
                                {
                                    headHtml.AppendFormat("<td rowspan=2>{0}</td>", i);
                                }
                            }
                            headHtml.Append("</tr>");
                            headHtml.AppendFormat("<tr class='th'>{0}</tr>", subHeadHtml.ToSafeString());

                            foreach (SurveyResult surveyResult in surveyResults)
                            {

                                ctnHtml.Append("<tr>");
                                Employee employee = new EmployeeService().GetDomain(surveyResult.Tester);

                                ctnHtml.AppendFormat("<td>{0}</td><td>{1}</td>", employee.Code, employee.Name);
                                for (int i = 0; i < subjects.Count; i++)
                                {


                                    string answerStr = string.Empty;
                                    //先取是否有子题目
                                    IDictionary<string, object> parameter = new Dictionary<string, object>();
                                    parameter.Add("ParentID", subjects[i].ID);
                                    List<Subject> subSubjects = new SubjectService().FindAll(parameter).ToList();

                                    if (subSubjects.Count > 0)
                                    {
                                        IList<string> subSubjectIDs = subSubjects.Select(p => p.ID).ToList();
                                        IList<AnswerRecord> subAnswebRecords = answerRecords.Where(p => subSubjectIDs.Contains(p.SubjectID) && p.AssessmentResultID.EqualIgnoreCase(surveyResult.ID)).ToList();
                                        foreach (AnswerRecord subAnswerRecord in subAnswebRecords)
                                        {
                                            answerStr += subAnswerRecord.Anwser + ",";
                                            ctnHtml.AppendFormat("<td>{0}</td>", subAnswerRecord.Anwser);
                                        }

                                    }
                                    else
                                    {
                                        IList<AnswerRecord> answerRecord = answerRecords.Where(o => (o.SubjectID.EqualIgnoreCase(subjects[i].ID) && o.AssessmentResultID.EqualIgnoreCase(surveyResult.ID))).ToList();
                                        answerStr = answerRecord.Count > 0 ? answerRecord[0].Anwser : "";
                                        ctnHtml.AppendFormat("<td>{0}</td>", answerStr);
                                    }


                                }
                                ctnHtml.Append("</tr>");

                            }
                        }

                        html.AppendFormat("{0}{1}</table>", headHtml, ctnHtml);

                    }
                }

              

            }
           return html.ToSafeString();
        }


        public void Export(string arg)
        {
            Survey survey = new SurveyService().GetDomain(CurrentId);


            string FileName = string.Format("Result - {0}",  DateTime.Now.ToString("yyyyMMdd"));
            HttpContext.Current.Response.Charset = "UTF-8"; // 或UTF-7 以防乱码
            HttpContext.Current.Response.ContentEncoding = System.Text.Encoding.Default;
            HttpContext.Current.Response.ContentType = "application/ms-excel";
            HttpContext.Current.Response.AppendHeader("Content-Disposition", "attachment;filename=" + "" + FileName + ".xls");

            //HttpContext.Current.Response.Write("\t 姓名 \t 电话  \t 地址 \t 备注 \n \t 姓名 \t 电话  \t 地址 \t 备注 \n \t 姓名 \t 电话  \t 地址 \t 备注 \n \t 姓名 \t 电话  \t 地址 \t 备注 \n \t 姓名 \t 电话  \t 地址 \t 备注 \n ");

            StringBuilder sb = new StringBuilder();
            sb.Append(string.Format("{0}",@"<style>
*{
text-align: center;
}
.target{ text-align:left; font-size:14px; margin-top:20px; font-weight:bold;}
</style>"));
            sb.Append(GetTableHtml(CurrentId));

            HttpContext.Current.Response.Write(sb.ToSafeString());
            try
            {
                HttpContext.Current.Response.End();
            }
            catch (Exception ex)
            {

            }

        }


        #endregion

       
    }
}
