#region Description
/*================================================================================
 *  Copyright (c) SunTek.  All rights reserved.
 * ===============================================================================
 * Solution: Assessment
 * Module:  Survey
 * Descrption:
 * CreateDate: 2010/11/18 14:01:00
 * Author: trenhui
 * Version:1.0
 * ===============================================================================
 * History
 *
 * Update Descrption:
 * Remark:
 * Update Time:
 * Author:generated by codesmithTemplate
 * 
 * ===============================================================================*/
#endregion
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Reflection;
using System.Text;

using Microsoft.Practices.Unity;
using log4net;
using EAFrame.Core;
using EAFrame.Core.Enums;
using EAFrame.Core.Service;
using EAFrame.Core.Security;
using EAFrame.Core.Extensions;
using EAFrame.Core.Web;
using EAFrame.Core.Caching;
using EAFrame.Core.FastInvoker;
using EAFrame.Core.DataFilter;
using EAFrame.WebControls;
using SunTek.Assessment.Domain;
using SunTek.Assessment.Service;
using SunTek.EAFrame.AuthorizeCenter.Domain;
using SunTek.EAFrame.AuthorizeCenter.Service;

using Newtonsoft.Json;
using EAFrame.Core.Data;

namespace WebSite
{
    public partial class SurveyManager : BasePage
    {
        private SurveyService surveyService = new SurveyService();

        #region ---界面处理方法---

        /// <summary>
        /// 初始化页面
        /// </summary>
        /// <param name="e"></param>
        protected override void OnInit(EventArgs e)
        {
            base.OnInit(e);
            gvList.PageChanged += new PagedGridView.PagintEventHandler(gvList_PageChanged);
             gvList.PageSize = 15;
        }

        void gvList_PageChanged(object sender, PagingArgs e)
        {
            ShowList(gvList, new PageInfo(e.PageIndex, e.PageSize, e.ItemCount));
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                gvList.IncludeRowDoubleClick = !Request.QueryString["Entry"].EqualIgnoreCase("test");
                ShowList(gvList, new PageInfo(gvList.PageIndex, gvList.PageSize, gvList.ItemCount));
            }
        }

        #endregion

        #region ---操作处理方法---
        /// <summary>
        /// 转向明细页面
        /// </summary>
        /// <param name="param"></param>
        protected void Redirect(string param)
        {
            var currentIdParam = PageContext.Action == ActionType.Add ? string.Empty : string.Format("&CurrentId={0}", CurrentId);
            Response.Redirect(string.Format("SurveyDetail.aspx?LastUrl={0}&Runat=1&ActionFlag={1}{2}{3}", Request.Url.PathAndQuery, PageContext.Action, currentIdParam, string.IsNullOrEmpty(param) ? param : "&" + param));
        }

        /// <summary>
        /// 新增
        /// </summary>
        public void Add()
        {
            PageContext.Action = ActionType.Add;
            PageContext.PageIndex = gvList.PageIndex;
            SavePageContext(PageContext);

            Redirect(string.Empty);
        }

        /// <summary>
        /// 查看
        /// </summary>
        public void View()
        {
            PageContext.Action = ActionType.View;
            PageContext.PageIndex = gvList.PageIndex;
            SavePageContext(PageContext);

            Redirect(string.Empty);
        }

        /// <summary>
        /// 修改
        /// </summary>
        public void Update()
        {
            PageContext.Action = ActionType.Update;
            PageContext.PageIndex = gvList.PageIndex;
            SavePageContext(PageContext);

            Redirect(string.Empty);
        }
        /// <summary>
        /// 查询
        /// </summary>
        public void Search()
        {
            ShowList(gvList, new PageInfo(1, gvList.PageSize, gvList.ItemCount));
        }
        /// <summary>
        /// 刷新
        /// </summary>
        public void Refresh()
        {
            ShowList(gvList, new PageInfo(gvList.PageIndex, gvList.PageSize, gvList.ItemCount));
        }

        /// <summary>
        /// 显示列表信息
        /// </summary>
        /// <param name="gvList">GridView对象</param>
        /// <param name="pageInfo">分页信息</param>
        public void ShowList(PagedGridView gvList, PageInfo pageInfo)
        {
            IDictionary<string, object> para = GetFilterParameters();
              para.SafeAdd("Status", new Condition(" Status!=3"));




              switch (Request.QueryString["Entry"].ToSafeString().ToLower())
              {
                  case "test":
                      para.SafeAdd("ID", new Condition(string.Format("ID in (select SurveyID from LA_SurveyResult r where r.Tester='{0}' and r.Status={1}) and Status=1 and ParentID!='-1'", User.ID, (int)SurveyResultStatus.InTest)));
                      if (Request.QueryString["SurveyID"].ToSafeString() != "")
                      {
                          para.SafeAdd("ParentID", Request.QueryString["SurveyID"].ToSafeString());
                      }

                      break;
                  case "finished":
                      para.SafeAdd("ID", new Condition(string.Format("ID in (select SurveyID from LA_SurveyResult where Tester='{0}' and Status={1})  and ParentID!='-1'", User.ID, (int)SurveyResultStatus.Finished)));
                      break;
                  case "expertset":
                      para.SafeAdd("Status", (int)SurveyStatus.Published);
                     // para.SafeAdd("ParentID","-1");
                      para.SafeAdd("ParentID", new Condition(string.Format("ParentID!='-1'")));
                      break;
                  default: para.SafeAdd("ParentID", "-1"); break;

              }

            //if (Request.QueryString["Entry"].EqualIgnoreCase("test"))
            //{
            //    //  para.SafeAdd("Status", 1);
            //    para.SafeAdd("ID", new Condition(string.Format("ID in (select SurveyID from LA_SurveyResult r where r.Tester='{0}' and r.Status={1}) and Status=1 and ParentID!='-1'", User.ID, (int)SurveyResultStatus.InTest)));
            //}

            // if (Request.QueryString["Entry"].EqualIgnoreCase("finished"))
            //{
            //    // para.SafeAdd("Status", 2);
            //    para.SafeAdd("ID", new Condition(string.Format("ID in (select SurveyID from LA_SurveyResult where Tester='{0}' and Status={1})  and ParentID!='-1'", User.ID, (int)SurveyResultStatus.Finished)));
            //}

            //if (Request.QueryString["Entry"].EqualIgnoreCase("ExpertSet"))
            //{
            //  para.SafeAdd("Status", (int)SurveyStatus.Published);
            //  para.SafeAdd("ParentID", new Condition(string.Format("ParentID!='-1'")));
            //}
            

            IPageOfList<Survey> result = surveyService.FindAll(para, pageInfo);

            gvList.ItemCount = result.PageInfo.ItemCount;
            gvList.DataSource = result.OrderBy(o=>o.CreateTime);
            gvList.DataBind();
        }


       
        public string GetStatus(string status)
        {
            if (Request.QueryString["Entry"].EqualIgnoreCase("test"))
                status = ((int)SurveyResultStatus.InTest).ToSafeString();
            else if (Request.QueryString["Entry"].EqualIgnoreCase("finished"))
                status = ((int)SurveyResultStatus.Finished).ToSafeString();
            else
                return RemarkAttribute.GetEnumRemark((SurveyStatus)Enum.Parse(typeof(SurveyStatus), status));

            return RemarkAttribute.GetEnumRemark((SurveyResultStatus)Enum.Parse(typeof(SurveyResultStatus), status));
        }


        public string GetCatDDl()
        {
            StringBuilder sb = new StringBuilder("<select onchange='onCatSelect(this)'><option  value='-1'>请选择</option>");

            IList<KeyValuePair<string, string>> values = SubjectCategory.FullTest.GetRemarks();
            IList<ComboxItem> items = values.Select(v => new ComboxItem() { Tag = "combox", Text = v.Value, Value = v.Key }).ToList();

            foreach (ComboxItem item in items)
            {
                sb.Append(string.Format("<option value='{0}'", item.Value));
                sb.Append(string.Format(">{0}</option>", item.Text));
            }

            sb.Append("</select>");

            return sb.ToSafeString();

        }


        public string Save(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();

            string errorMsg = string.Empty;
            ActionResult actionResult = ActionResult.Failed;
            string actionMessage = string.Empty;
            try
            {
                Survey survey = JsonConvert.DeserializeObject<Survey>(argument);
                if (string.IsNullOrEmpty(survey.ID))
                {
                    survey.ID = IdGenerator.NewComb().ToString();
                    survey.ParentID = "-1";// 父活动标识
                    survey.CreateTime = DateTime.Now;
                    survey.Creator = User.ID;
                    survey.OwnerOrg = User.OrgPath;
                    surveyService.SaveOrUpdate(survey);
                }
                else
                {
                    surveyService.Update(survey);
                }

                actionResult = ActionResult.Success;

                //获取提示信息
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);

                //记录操作日志
                AddActionLog(survey, PageContext.Action, actionResult, actionMessage);

                ajaxResult.ActionResult = actionResult;
                ajaxResult.RetValue = survey.ID;
                ajaxResult.PromptMsg = actionMessage;

            }
            catch (Exception ex)
            {
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);
                log.Error(actionMessage, ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }


        public string Delete(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();

            string errorMsg = string.Empty;
            ActionResult actionResult = ActionResult.Failed;
            string actionMessage = string.Empty;
            try
            {
                if (!string.IsNullOrWhiteSpace(argument))
                {
                    Survey survey = surveyService.GetDomain(argument);
                    if (survey != null)
                    {
                        survey.Status = 3;
                        surveyService.Update(survey);
                    }
                    actionResult = ActionResult.Success;

                    //获取提示信息
                    actionMessage = RemarkAttribute.GetEnumRemark(actionResult);

                    //记录操作日志
                    AddActionLog(survey, PageContext.Action, actionResult, actionMessage);

                    ajaxResult.ActionResult = actionResult;
                    ajaxResult.RetValue = survey.ID;
                    ajaxResult.PromptMsg = actionMessage;
                }
            }
            catch (Exception ex)
            {
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);
                log.Error(actionMessage, ex);
            }

            return JsonConvert.SerializeObject(ajaxResult);
        }

        public string GetExamName(string examPaperID)
        {
            ExamPaper examPaper = new ExamPaperService().GetDomain(examPaperID);
            string examPaperName = examPaper != null ? examPaper.Title : "";
            return examPaperName;
        }


        public string GetUserName(object userid)
        {



            if (!string.IsNullOrEmpty(userid.ToSafeString()))
            {
                IList<string> surveyTargets = userid.ToSafeString().Trim(',').Split(',').ToList();
                StringBuilder surveyTargetStr = new StringBuilder();
                foreach (string surveyTarget in surveyTargets)
                {
                    Employee employee = new EmployeeService().GetDomain(surveyTarget);
                    if (employee != null)
                    {
                        surveyTargetStr.AppendFormat("{0},", employee.Name);
                    }
                }
                return surveyTargetStr.ToSafeString().Trim(',');
            }
            return "";
        }

        /// <summary>
        /// 停用活动
        /// </summary>
        /// <param name="argument"></param>
        /// <returns></returns>
        public string Stop(string argument)
        {
            AjaxResult ajaxResult = new AjaxResult();
            string errorMsg = string.Empty;
            ActionResult actionResult = ActionResult.Failed;
            string actionMessage = string.Empty;
            try
            {
                Survey survey = surveyService.GetDomain(argument);
                if (survey != null)
                {
                    survey.Status = (short)SurveyStatus.Stop;
                    surveyService.SaveOrUpdate(survey);
                    actionResult = ActionResult.Success;
                    ajaxResult.RetValue = survey.ID;
                }

                //获取提示信息
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);

                //记录操作日志
                AddActionLog(survey, PageContext.Action, actionResult, actionMessage);

            }
            catch (Exception ex)
            {
                actionMessage = RemarkAttribute.GetEnumRemark(actionResult);
                log.Error(actionMessage, ex);
            }
            ajaxResult.ActionResult = actionResult;
            ajaxResult.PromptMsg = actionMessage;

            return JsonConvert.SerializeObject(ajaxResult);
        }

        #endregion
    }
}
